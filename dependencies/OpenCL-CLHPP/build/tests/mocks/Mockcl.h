/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKCL_H
#define _MOCKCL_H

#include "CL/cl_platform.h"
#include "cl.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockcl_Init(void);
void Mockcl_Destroy(void);
void Mockcl_Verify(void);


typedef void(*cmock_cl_func_ptr1)(const char* errinfo, const void* private_info, size_t cb, void* user_data);
typedef void(*cmock_cl_func_ptr2)(const char* errinfo, const void* private_info, size_t cb, void* user_data);
typedef void(*cmock_cl_func_ptr3)(cl_context context, void* user_data);
typedef void(*cmock_cl_func_ptr4)(cl_mem memobj, void* user_data);
typedef void(*cmock_cl_func_ptr5)(cl_program program, void* user_data);
typedef void(*cmock_cl_func_ptr6)(cl_program program, void* user_data);
typedef void(*cmock_cl_func_ptr7)(cl_program program, void* user_data);
typedef void(*cmock_cl_func_ptr8)(cl_program program, void* user_data);
typedef void(*cmock_cl_func_ptr9)(cl_event event, cl_int event_command_status, void* user_data);
typedef void(*cmock_cl_func_ptr10)(void*);
typedef void(*cmock_cl_func_ptr11)(cl_command_queue queue, cl_uint num_svm_pointers, void** svm_pointers, void* user_data);


#define clGetPlatformIDs_ExpectAndReturn(num_entries, platforms, num_platforms, cmock_retval) clGetPlatformIDs_CMockExpectAndReturn(__LINE__, num_entries, platforms, num_platforms, cmock_retval)
void clGetPlatformIDs_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_uint num_entries, cl_platform_id* platforms, cl_uint* num_platforms, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetPlatformIDs_CALLBACK)(cl_uint num_entries, cl_platform_id* platforms, cl_uint* num_platforms, int cmock_num_calls);
void clGetPlatformIDs_StubWithCallback(CMOCK_clGetPlatformIDs_CALLBACK Callback);
#define clGetPlatformInfo_ExpectAndReturn(platform, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetPlatformInfo_CMockExpectAndReturn(__LINE__, platform, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetPlatformInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_platform_id platform, cl_platform_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetPlatformInfo_CALLBACK)(cl_platform_id platform, cl_platform_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetPlatformInfo_StubWithCallback(CMOCK_clGetPlatformInfo_CALLBACK Callback);
#define clGetDeviceIDs_ExpectAndReturn(platform, device_type, num_entries, devices, num_devices, cmock_retval) clGetDeviceIDs_CMockExpectAndReturn(__LINE__, platform, device_type, num_entries, devices, num_devices, cmock_retval)
void clGetDeviceIDs_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_platform_id platform, cl_device_type device_type, cl_uint num_entries, cl_device_id* devices, cl_uint* num_devices, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetDeviceIDs_CALLBACK)(cl_platform_id platform, cl_device_type device_type, cl_uint num_entries, cl_device_id* devices, cl_uint* num_devices, int cmock_num_calls);
void clGetDeviceIDs_StubWithCallback(CMOCK_clGetDeviceIDs_CALLBACK Callback);
#define clGetDeviceInfo_ExpectAndReturn(device, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetDeviceInfo_CMockExpectAndReturn(__LINE__, device, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetDeviceInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_device_id device, cl_device_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetDeviceInfo_CALLBACK)(cl_device_id device, cl_device_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetDeviceInfo_StubWithCallback(CMOCK_clGetDeviceInfo_CALLBACK Callback);
#define clCreateSubDevices_ExpectAndReturn(in_device, properties, num_devices, out_devices, num_devices_ret, cmock_retval) clCreateSubDevices_CMockExpectAndReturn(__LINE__, in_device, properties, num_devices, out_devices, num_devices_ret, cmock_retval)
void clCreateSubDevices_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_device_id in_device, const cl_device_partition_property* properties, cl_uint num_devices, cl_device_id* out_devices, cl_uint* num_devices_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clCreateSubDevices_CALLBACK)(cl_device_id in_device, const cl_device_partition_property* properties, cl_uint num_devices, cl_device_id* out_devices, cl_uint* num_devices_ret, int cmock_num_calls);
void clCreateSubDevices_StubWithCallback(CMOCK_clCreateSubDevices_CALLBACK Callback);
#define clRetainDevice_ExpectAndReturn(device, cmock_retval) clRetainDevice_CMockExpectAndReturn(__LINE__, device, cmock_retval)
void clRetainDevice_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_device_id device, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clRetainDevice_CALLBACK)(cl_device_id device, int cmock_num_calls);
void clRetainDevice_StubWithCallback(CMOCK_clRetainDevice_CALLBACK Callback);
#define clReleaseDevice_ExpectAndReturn(device, cmock_retval) clReleaseDevice_CMockExpectAndReturn(__LINE__, device, cmock_retval)
void clReleaseDevice_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_device_id device, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clReleaseDevice_CALLBACK)(cl_device_id device, int cmock_num_calls);
void clReleaseDevice_StubWithCallback(CMOCK_clReleaseDevice_CALLBACK Callback);
#define clSetDefaultDeviceCommandQueue_ExpectAndReturn(context, device, command_queue, cmock_retval) clSetDefaultDeviceCommandQueue_CMockExpectAndReturn(__LINE__, context, device, command_queue, cmock_retval)
void clSetDefaultDeviceCommandQueue_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_device_id device, cl_command_queue command_queue, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clSetDefaultDeviceCommandQueue_CALLBACK)(cl_context context, cl_device_id device, cl_command_queue command_queue, int cmock_num_calls);
void clSetDefaultDeviceCommandQueue_StubWithCallback(CMOCK_clSetDefaultDeviceCommandQueue_CALLBACK Callback);
#define clGetDeviceAndHostTimer_ExpectAndReturn(device, device_timestamp, host_timestamp, cmock_retval) clGetDeviceAndHostTimer_CMockExpectAndReturn(__LINE__, device, device_timestamp, host_timestamp, cmock_retval)
void clGetDeviceAndHostTimer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_device_id device, cl_ulong* device_timestamp, cl_ulong* host_timestamp, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetDeviceAndHostTimer_CALLBACK)(cl_device_id device, cl_ulong* device_timestamp, cl_ulong* host_timestamp, int cmock_num_calls);
void clGetDeviceAndHostTimer_StubWithCallback(CMOCK_clGetDeviceAndHostTimer_CALLBACK Callback);
#define clGetHostTimer_ExpectAndReturn(device, host_timestamp, cmock_retval) clGetHostTimer_CMockExpectAndReturn(__LINE__, device, host_timestamp, cmock_retval)
void clGetHostTimer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_device_id device, cl_ulong* host_timestamp, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetHostTimer_CALLBACK)(cl_device_id device, cl_ulong* host_timestamp, int cmock_num_calls);
void clGetHostTimer_StubWithCallback(CMOCK_clGetHostTimer_CALLBACK Callback);
#define clCreateContext_ExpectAndReturn(properties, num_devices, devices, pfn_notify, user_data, errcode_ret, cmock_retval) clCreateContext_CMockExpectAndReturn(__LINE__, properties, num_devices, devices, pfn_notify, user_data, errcode_ret, cmock_retval)
void clCreateContext_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const cl_context_properties* properties, cl_uint num_devices, const cl_device_id* devices, cmock_cl_func_ptr1 pfn_notify, void* user_data, cl_int* errcode_ret, cl_context cmock_to_return);
typedef cl_context (* CMOCK_clCreateContext_CALLBACK)(const cl_context_properties* properties, cl_uint num_devices, const cl_device_id* devices, cmock_cl_func_ptr1 pfn_notify, void* user_data, cl_int* errcode_ret, int cmock_num_calls);
void clCreateContext_StubWithCallback(CMOCK_clCreateContext_CALLBACK Callback);
#define clCreateContextFromType_ExpectAndReturn(properties, device_type, pfn_notify, user_data, errcode_ret, cmock_retval) clCreateContextFromType_CMockExpectAndReturn(__LINE__, properties, device_type, pfn_notify, user_data, errcode_ret, cmock_retval)
void clCreateContextFromType_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const cl_context_properties* properties, cl_device_type device_type, cmock_cl_func_ptr2 pfn_notify, void* user_data, cl_int* errcode_ret, cl_context cmock_to_return);
typedef cl_context (* CMOCK_clCreateContextFromType_CALLBACK)(const cl_context_properties* properties, cl_device_type device_type, cmock_cl_func_ptr2 pfn_notify, void* user_data, cl_int* errcode_ret, int cmock_num_calls);
void clCreateContextFromType_StubWithCallback(CMOCK_clCreateContextFromType_CALLBACK Callback);
#define clRetainContext_ExpectAndReturn(context, cmock_retval) clRetainContext_CMockExpectAndReturn(__LINE__, context, cmock_retval)
void clRetainContext_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clRetainContext_CALLBACK)(cl_context context, int cmock_num_calls);
void clRetainContext_StubWithCallback(CMOCK_clRetainContext_CALLBACK Callback);
#define clReleaseContext_ExpectAndReturn(context, cmock_retval) clReleaseContext_CMockExpectAndReturn(__LINE__, context, cmock_retval)
void clReleaseContext_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clReleaseContext_CALLBACK)(cl_context context, int cmock_num_calls);
void clReleaseContext_StubWithCallback(CMOCK_clReleaseContext_CALLBACK Callback);
#define clGetContextInfo_ExpectAndReturn(context, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetContextInfo_CMockExpectAndReturn(__LINE__, context, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetContextInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_context_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetContextInfo_CALLBACK)(cl_context context, cl_context_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetContextInfo_StubWithCallback(CMOCK_clGetContextInfo_CALLBACK Callback);
#define clSetContextDestructorCallback_ExpectAndReturn(context, pfn_notify, user_data, cmock_retval) clSetContextDestructorCallback_CMockExpectAndReturn(__LINE__, context, pfn_notify, user_data, cmock_retval)
void clSetContextDestructorCallback_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cmock_cl_func_ptr3 pfn_notify, void* user_data, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clSetContextDestructorCallback_CALLBACK)(cl_context context, cmock_cl_func_ptr3 pfn_notify, void* user_data, int cmock_num_calls);
void clSetContextDestructorCallback_StubWithCallback(CMOCK_clSetContextDestructorCallback_CALLBACK Callback);
#define clCreateCommandQueueWithProperties_ExpectAndReturn(context, device, properties, errcode_ret, cmock_retval) clCreateCommandQueueWithProperties_CMockExpectAndReturn(__LINE__, context, device, properties, errcode_ret, cmock_retval)
void clCreateCommandQueueWithProperties_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_device_id device, const cl_queue_properties* properties, cl_int* errcode_ret, cl_command_queue cmock_to_return);
typedef cl_command_queue (* CMOCK_clCreateCommandQueueWithProperties_CALLBACK)(cl_context context, cl_device_id device, const cl_queue_properties* properties, cl_int* errcode_ret, int cmock_num_calls);
void clCreateCommandQueueWithProperties_StubWithCallback(CMOCK_clCreateCommandQueueWithProperties_CALLBACK Callback);
#define clRetainCommandQueue_ExpectAndReturn(command_queue, cmock_retval) clRetainCommandQueue_CMockExpectAndReturn(__LINE__, command_queue, cmock_retval)
void clRetainCommandQueue_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clRetainCommandQueue_CALLBACK)(cl_command_queue command_queue, int cmock_num_calls);
void clRetainCommandQueue_StubWithCallback(CMOCK_clRetainCommandQueue_CALLBACK Callback);
#define clReleaseCommandQueue_ExpectAndReturn(command_queue, cmock_retval) clReleaseCommandQueue_CMockExpectAndReturn(__LINE__, command_queue, cmock_retval)
void clReleaseCommandQueue_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clReleaseCommandQueue_CALLBACK)(cl_command_queue command_queue, int cmock_num_calls);
void clReleaseCommandQueue_StubWithCallback(CMOCK_clReleaseCommandQueue_CALLBACK Callback);
#define clGetCommandQueueInfo_ExpectAndReturn(command_queue, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetCommandQueueInfo_CMockExpectAndReturn(__LINE__, command_queue, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetCommandQueueInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_command_queue_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetCommandQueueInfo_CALLBACK)(cl_command_queue command_queue, cl_command_queue_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetCommandQueueInfo_StubWithCallback(CMOCK_clGetCommandQueueInfo_CALLBACK Callback);
#define clCreateBuffer_ExpectAndReturn(context, flags, size, host_ptr, errcode_ret, cmock_retval) clCreateBuffer_CMockExpectAndReturn(__LINE__, context, flags, size, host_ptr, errcode_ret, cmock_retval)
void clCreateBuffer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_mem_flags flags, size_t size, void* host_ptr, cl_int* errcode_ret, cl_mem cmock_to_return);
typedef cl_mem (* CMOCK_clCreateBuffer_CALLBACK)(cl_context context, cl_mem_flags flags, size_t size, void* host_ptr, cl_int* errcode_ret, int cmock_num_calls);
void clCreateBuffer_StubWithCallback(CMOCK_clCreateBuffer_CALLBACK Callback);
#define clCreateSubBuffer_ExpectAndReturn(buffer, flags, buffer_create_type, buffer_create_info, errcode_ret, cmock_retval) clCreateSubBuffer_CMockExpectAndReturn(__LINE__, buffer, flags, buffer_create_type, buffer_create_info, errcode_ret, cmock_retval)
void clCreateSubBuffer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_mem buffer, cl_mem_flags flags, cl_buffer_create_type buffer_create_type, const void* buffer_create_info, cl_int* errcode_ret, cl_mem cmock_to_return);
typedef cl_mem (* CMOCK_clCreateSubBuffer_CALLBACK)(cl_mem buffer, cl_mem_flags flags, cl_buffer_create_type buffer_create_type, const void* buffer_create_info, cl_int* errcode_ret, int cmock_num_calls);
void clCreateSubBuffer_StubWithCallback(CMOCK_clCreateSubBuffer_CALLBACK Callback);
#define clCreateImage_ExpectAndReturn(context, flags, image_format, image_desc, host_ptr, errcode_ret, cmock_retval) clCreateImage_CMockExpectAndReturn(__LINE__, context, flags, image_format, image_desc, host_ptr, errcode_ret, cmock_retval)
void clCreateImage_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_mem_flags flags, const cl_image_format* image_format, const cl_image_desc* image_desc, void* host_ptr, cl_int* errcode_ret, cl_mem cmock_to_return);
typedef cl_mem (* CMOCK_clCreateImage_CALLBACK)(cl_context context, cl_mem_flags flags, const cl_image_format* image_format, const cl_image_desc* image_desc, void* host_ptr, cl_int* errcode_ret, int cmock_num_calls);
void clCreateImage_StubWithCallback(CMOCK_clCreateImage_CALLBACK Callback);
#define clCreatePipe_ExpectAndReturn(context, flags, pipe_packet_size, pipe_max_packets, properties, errcode_ret, cmock_retval) clCreatePipe_CMockExpectAndReturn(__LINE__, context, flags, pipe_packet_size, pipe_max_packets, properties, errcode_ret, cmock_retval)
void clCreatePipe_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_mem_flags flags, cl_uint pipe_packet_size, cl_uint pipe_max_packets, const cl_pipe_properties* properties, cl_int* errcode_ret, cl_mem cmock_to_return);
typedef cl_mem (* CMOCK_clCreatePipe_CALLBACK)(cl_context context, cl_mem_flags flags, cl_uint pipe_packet_size, cl_uint pipe_max_packets, const cl_pipe_properties* properties, cl_int* errcode_ret, int cmock_num_calls);
void clCreatePipe_StubWithCallback(CMOCK_clCreatePipe_CALLBACK Callback);
#define clCreateBufferWithProperties_ExpectAndReturn(context, properties, flags, size, host_ptr, errcode_ret, cmock_retval) clCreateBufferWithProperties_CMockExpectAndReturn(__LINE__, context, properties, flags, size, host_ptr, errcode_ret, cmock_retval)
void clCreateBufferWithProperties_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, const cl_mem_properties* properties, cl_mem_flags flags, size_t size, void* host_ptr, cl_int* errcode_ret, cl_mem cmock_to_return);
typedef cl_mem (* CMOCK_clCreateBufferWithProperties_CALLBACK)(cl_context context, const cl_mem_properties* properties, cl_mem_flags flags, size_t size, void* host_ptr, cl_int* errcode_ret, int cmock_num_calls);
void clCreateBufferWithProperties_StubWithCallback(CMOCK_clCreateBufferWithProperties_CALLBACK Callback);
#define clCreateImageWithProperties_ExpectAndReturn(context, properties, flags, image_format, image_desc, host_ptr, errcode_ret, cmock_retval) clCreateImageWithProperties_CMockExpectAndReturn(__LINE__, context, properties, flags, image_format, image_desc, host_ptr, errcode_ret, cmock_retval)
void clCreateImageWithProperties_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, const cl_mem_properties* properties, cl_mem_flags flags, const cl_image_format* image_format, const cl_image_desc* image_desc, void* host_ptr, cl_int* errcode_ret, cl_mem cmock_to_return);
typedef cl_mem (* CMOCK_clCreateImageWithProperties_CALLBACK)(cl_context context, const cl_mem_properties* properties, cl_mem_flags flags, const cl_image_format* image_format, const cl_image_desc* image_desc, void* host_ptr, cl_int* errcode_ret, int cmock_num_calls);
void clCreateImageWithProperties_StubWithCallback(CMOCK_clCreateImageWithProperties_CALLBACK Callback);
#define clRetainMemObject_ExpectAndReturn(memobj, cmock_retval) clRetainMemObject_CMockExpectAndReturn(__LINE__, memobj, cmock_retval)
void clRetainMemObject_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_mem memobj, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clRetainMemObject_CALLBACK)(cl_mem memobj, int cmock_num_calls);
void clRetainMemObject_StubWithCallback(CMOCK_clRetainMemObject_CALLBACK Callback);
#define clReleaseMemObject_ExpectAndReturn(memobj, cmock_retval) clReleaseMemObject_CMockExpectAndReturn(__LINE__, memobj, cmock_retval)
void clReleaseMemObject_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_mem memobj, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clReleaseMemObject_CALLBACK)(cl_mem memobj, int cmock_num_calls);
void clReleaseMemObject_StubWithCallback(CMOCK_clReleaseMemObject_CALLBACK Callback);
#define clGetSupportedImageFormats_ExpectAndReturn(context, flags, image_type, num_entries, image_formats, num_image_formats, cmock_retval) clGetSupportedImageFormats_CMockExpectAndReturn(__LINE__, context, flags, image_type, num_entries, image_formats, num_image_formats, cmock_retval)
void clGetSupportedImageFormats_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_mem_flags flags, cl_mem_object_type image_type, cl_uint num_entries, cl_image_format* image_formats, cl_uint* num_image_formats, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetSupportedImageFormats_CALLBACK)(cl_context context, cl_mem_flags flags, cl_mem_object_type image_type, cl_uint num_entries, cl_image_format* image_formats, cl_uint* num_image_formats, int cmock_num_calls);
void clGetSupportedImageFormats_StubWithCallback(CMOCK_clGetSupportedImageFormats_CALLBACK Callback);
#define clGetMemObjectInfo_ExpectAndReturn(memobj, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetMemObjectInfo_CMockExpectAndReturn(__LINE__, memobj, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetMemObjectInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_mem memobj, cl_mem_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetMemObjectInfo_CALLBACK)(cl_mem memobj, cl_mem_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetMemObjectInfo_StubWithCallback(CMOCK_clGetMemObjectInfo_CALLBACK Callback);
#define clGetImageInfo_ExpectAndReturn(image, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetImageInfo_CMockExpectAndReturn(__LINE__, image, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetImageInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_mem image, cl_image_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetImageInfo_CALLBACK)(cl_mem image, cl_image_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetImageInfo_StubWithCallback(CMOCK_clGetImageInfo_CALLBACK Callback);
#define clGetPipeInfo_ExpectAndReturn(pipe, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetPipeInfo_CMockExpectAndReturn(__LINE__, pipe, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetPipeInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_mem pipe, cl_pipe_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetPipeInfo_CALLBACK)(cl_mem pipe, cl_pipe_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetPipeInfo_StubWithCallback(CMOCK_clGetPipeInfo_CALLBACK Callback);
#define clSetMemObjectDestructorCallback_ExpectAndReturn(memobj, pfn_notify, user_data, cmock_retval) clSetMemObjectDestructorCallback_CMockExpectAndReturn(__LINE__, memobj, pfn_notify, user_data, cmock_retval)
void clSetMemObjectDestructorCallback_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_mem memobj, cmock_cl_func_ptr4 pfn_notify, void* user_data, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clSetMemObjectDestructorCallback_CALLBACK)(cl_mem memobj, cmock_cl_func_ptr4 pfn_notify, void* user_data, int cmock_num_calls);
void clSetMemObjectDestructorCallback_StubWithCallback(CMOCK_clSetMemObjectDestructorCallback_CALLBACK Callback);
#define clSVMAlloc_ExpectAndReturn(context, flags, size, alignment, cmock_retval) clSVMAlloc_CMockExpectAndReturn(__LINE__, context, flags, size, alignment, cmock_retval)
void clSVMAlloc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_svm_mem_flags flags, size_t size, cl_uint alignment, void* cmock_to_return);
typedef void* (* CMOCK_clSVMAlloc_CALLBACK)(cl_context context, cl_svm_mem_flags flags, size_t size, cl_uint alignment, int cmock_num_calls);
void clSVMAlloc_StubWithCallback(CMOCK_clSVMAlloc_CALLBACK Callback);
#define clSVMFree_Expect(context, svm_pointer) clSVMFree_CMockExpect(__LINE__, context, svm_pointer)
void clSVMFree_CMockExpect(UNITY_LINE_TYPE cmock_line, cl_context context, void* svm_pointer);
typedef void (* CMOCK_clSVMFree_CALLBACK)(cl_context context, void* svm_pointer, int cmock_num_calls);
void clSVMFree_StubWithCallback(CMOCK_clSVMFree_CALLBACK Callback);
#define clCreateSamplerWithProperties_ExpectAndReturn(context, sampler_properties, errcode_ret, cmock_retval) clCreateSamplerWithProperties_CMockExpectAndReturn(__LINE__, context, sampler_properties, errcode_ret, cmock_retval)
void clCreateSamplerWithProperties_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, const cl_sampler_properties* sampler_properties, cl_int* errcode_ret, cl_sampler cmock_to_return);
typedef cl_sampler (* CMOCK_clCreateSamplerWithProperties_CALLBACK)(cl_context context, const cl_sampler_properties* sampler_properties, cl_int* errcode_ret, int cmock_num_calls);
void clCreateSamplerWithProperties_StubWithCallback(CMOCK_clCreateSamplerWithProperties_CALLBACK Callback);
#define clRetainSampler_ExpectAndReturn(sampler, cmock_retval) clRetainSampler_CMockExpectAndReturn(__LINE__, sampler, cmock_retval)
void clRetainSampler_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_sampler sampler, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clRetainSampler_CALLBACK)(cl_sampler sampler, int cmock_num_calls);
void clRetainSampler_StubWithCallback(CMOCK_clRetainSampler_CALLBACK Callback);
#define clReleaseSampler_ExpectAndReturn(sampler, cmock_retval) clReleaseSampler_CMockExpectAndReturn(__LINE__, sampler, cmock_retval)
void clReleaseSampler_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_sampler sampler, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clReleaseSampler_CALLBACK)(cl_sampler sampler, int cmock_num_calls);
void clReleaseSampler_StubWithCallback(CMOCK_clReleaseSampler_CALLBACK Callback);
#define clGetSamplerInfo_ExpectAndReturn(sampler, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetSamplerInfo_CMockExpectAndReturn(__LINE__, sampler, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetSamplerInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_sampler sampler, cl_sampler_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetSamplerInfo_CALLBACK)(cl_sampler sampler, cl_sampler_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetSamplerInfo_StubWithCallback(CMOCK_clGetSamplerInfo_CALLBACK Callback);
#define clCreateProgramWithSource_ExpectAndReturn(context, count, strings, lengths, errcode_ret, cmock_retval) clCreateProgramWithSource_CMockExpectAndReturn(__LINE__, context, count, strings, lengths, errcode_ret, cmock_retval)
void clCreateProgramWithSource_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_uint count, const char** strings, const size_t* lengths, cl_int* errcode_ret, cl_program cmock_to_return);
typedef cl_program (* CMOCK_clCreateProgramWithSource_CALLBACK)(cl_context context, cl_uint count, const char** strings, const size_t* lengths, cl_int* errcode_ret, int cmock_num_calls);
void clCreateProgramWithSource_StubWithCallback(CMOCK_clCreateProgramWithSource_CALLBACK Callback);
#define clCreateProgramWithBinary_ExpectAndReturn(context, num_devices, device_list, lengths, binaries, binary_status, errcode_ret, cmock_retval) clCreateProgramWithBinary_CMockExpectAndReturn(__LINE__, context, num_devices, device_list, lengths, binaries, binary_status, errcode_ret, cmock_retval)
void clCreateProgramWithBinary_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_uint num_devices, const cl_device_id* device_list, const size_t* lengths, const unsigned char** binaries, cl_int* binary_status, cl_int* errcode_ret, cl_program cmock_to_return);
typedef cl_program (* CMOCK_clCreateProgramWithBinary_CALLBACK)(cl_context context, cl_uint num_devices, const cl_device_id* device_list, const size_t* lengths, const unsigned char** binaries, cl_int* binary_status, cl_int* errcode_ret, int cmock_num_calls);
void clCreateProgramWithBinary_StubWithCallback(CMOCK_clCreateProgramWithBinary_CALLBACK Callback);
#define clCreateProgramWithBuiltInKernels_ExpectAndReturn(context, num_devices, device_list, kernel_names, errcode_ret, cmock_retval) clCreateProgramWithBuiltInKernels_CMockExpectAndReturn(__LINE__, context, num_devices, device_list, kernel_names, errcode_ret, cmock_retval)
void clCreateProgramWithBuiltInKernels_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_uint num_devices, const cl_device_id* device_list, const char* kernel_names, cl_int* errcode_ret, cl_program cmock_to_return);
typedef cl_program (* CMOCK_clCreateProgramWithBuiltInKernels_CALLBACK)(cl_context context, cl_uint num_devices, const cl_device_id* device_list, const char* kernel_names, cl_int* errcode_ret, int cmock_num_calls);
void clCreateProgramWithBuiltInKernels_StubWithCallback(CMOCK_clCreateProgramWithBuiltInKernels_CALLBACK Callback);
#define clCreateProgramWithIL_ExpectAndReturn(context, il, length, errcode_ret, cmock_retval) clCreateProgramWithIL_CMockExpectAndReturn(__LINE__, context, il, length, errcode_ret, cmock_retval)
void clCreateProgramWithIL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, const void* il, size_t length, cl_int* errcode_ret, cl_program cmock_to_return);
typedef cl_program (* CMOCK_clCreateProgramWithIL_CALLBACK)(cl_context context, const void* il, size_t length, cl_int* errcode_ret, int cmock_num_calls);
void clCreateProgramWithIL_StubWithCallback(CMOCK_clCreateProgramWithIL_CALLBACK Callback);
#define clRetainProgram_ExpectAndReturn(program, cmock_retval) clRetainProgram_CMockExpectAndReturn(__LINE__, program, cmock_retval)
void clRetainProgram_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_program program, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clRetainProgram_CALLBACK)(cl_program program, int cmock_num_calls);
void clRetainProgram_StubWithCallback(CMOCK_clRetainProgram_CALLBACK Callback);
#define clReleaseProgram_ExpectAndReturn(program, cmock_retval) clReleaseProgram_CMockExpectAndReturn(__LINE__, program, cmock_retval)
void clReleaseProgram_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_program program, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clReleaseProgram_CALLBACK)(cl_program program, int cmock_num_calls);
void clReleaseProgram_StubWithCallback(CMOCK_clReleaseProgram_CALLBACK Callback);
#define clBuildProgram_ExpectAndReturn(program, num_devices, device_list, options, pfn_notify, user_data, cmock_retval) clBuildProgram_CMockExpectAndReturn(__LINE__, program, num_devices, device_list, options, pfn_notify, user_data, cmock_retval)
void clBuildProgram_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_program program, cl_uint num_devices, const cl_device_id* device_list, const char* options, cmock_cl_func_ptr5 pfn_notify, void* user_data, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clBuildProgram_CALLBACK)(cl_program program, cl_uint num_devices, const cl_device_id* device_list, const char* options, cmock_cl_func_ptr5 pfn_notify, void* user_data, int cmock_num_calls);
void clBuildProgram_StubWithCallback(CMOCK_clBuildProgram_CALLBACK Callback);
#define clCompileProgram_ExpectAndReturn(program, num_devices, device_list, options, num_input_headers, input_headers, header_include_names, pfn_notify, user_data, cmock_retval) clCompileProgram_CMockExpectAndReturn(__LINE__, program, num_devices, device_list, options, num_input_headers, input_headers, header_include_names, pfn_notify, user_data, cmock_retval)
void clCompileProgram_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_program program, cl_uint num_devices, const cl_device_id* device_list, const char* options, cl_uint num_input_headers, const cl_program* input_headers, const char** header_include_names, cmock_cl_func_ptr6 pfn_notify, void* user_data, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clCompileProgram_CALLBACK)(cl_program program, cl_uint num_devices, const cl_device_id* device_list, const char* options, cl_uint num_input_headers, const cl_program* input_headers, const char** header_include_names, cmock_cl_func_ptr6 pfn_notify, void* user_data, int cmock_num_calls);
void clCompileProgram_StubWithCallback(CMOCK_clCompileProgram_CALLBACK Callback);
#define clLinkProgram_ExpectAndReturn(context, num_devices, device_list, options, num_input_programs, input_programs, pfn_notify, user_data, errcode_ret, cmock_retval) clLinkProgram_CMockExpectAndReturn(__LINE__, context, num_devices, device_list, options, num_input_programs, input_programs, pfn_notify, user_data, errcode_ret, cmock_retval)
void clLinkProgram_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_uint num_devices, const cl_device_id* device_list, const char* options, cl_uint num_input_programs, const cl_program* input_programs, cmock_cl_func_ptr7 pfn_notify, void* user_data, cl_int* errcode_ret, cl_program cmock_to_return);
typedef cl_program (* CMOCK_clLinkProgram_CALLBACK)(cl_context context, cl_uint num_devices, const cl_device_id* device_list, const char* options, cl_uint num_input_programs, const cl_program* input_programs, cmock_cl_func_ptr7 pfn_notify, void* user_data, cl_int* errcode_ret, int cmock_num_calls);
void clLinkProgram_StubWithCallback(CMOCK_clLinkProgram_CALLBACK Callback);
#define clSetProgramReleaseCallback_ExpectAndReturn(program, pfn_notify, user_data, cmock_retval) clSetProgramReleaseCallback_CMockExpectAndReturn(__LINE__, program, pfn_notify, user_data, cmock_retval)
void clSetProgramReleaseCallback_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_program program, cmock_cl_func_ptr8 pfn_notify, void* user_data, CL_API_PREFIX__VERSION_2_2_DEPRECATED cl_int cmock_to_return);
typedef CL_API_PREFIX__VERSION_2_2_DEPRECATED cl_int (* CMOCK_clSetProgramReleaseCallback_CALLBACK)(cl_program program, cmock_cl_func_ptr8 pfn_notify, void* user_data, int cmock_num_calls);
void clSetProgramReleaseCallback_StubWithCallback(CMOCK_clSetProgramReleaseCallback_CALLBACK Callback);
#define clSetProgramSpecializationConstant_ExpectAndReturn(program, spec_id, spec_size, spec_value, cmock_retval) clSetProgramSpecializationConstant_CMockExpectAndReturn(__LINE__, program, spec_id, spec_size, spec_value, cmock_retval)
void clSetProgramSpecializationConstant_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_program program, cl_uint spec_id, size_t spec_size, const void* spec_value, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clSetProgramSpecializationConstant_CALLBACK)(cl_program program, cl_uint spec_id, size_t spec_size, const void* spec_value, int cmock_num_calls);
void clSetProgramSpecializationConstant_StubWithCallback(CMOCK_clSetProgramSpecializationConstant_CALLBACK Callback);
#define clUnloadPlatformCompiler_ExpectAndReturn(platform, cmock_retval) clUnloadPlatformCompiler_CMockExpectAndReturn(__LINE__, platform, cmock_retval)
void clUnloadPlatformCompiler_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_platform_id platform, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clUnloadPlatformCompiler_CALLBACK)(cl_platform_id platform, int cmock_num_calls);
void clUnloadPlatformCompiler_StubWithCallback(CMOCK_clUnloadPlatformCompiler_CALLBACK Callback);
#define clGetProgramInfo_ExpectAndReturn(program, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetProgramInfo_CMockExpectAndReturn(__LINE__, program, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetProgramInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_program program, cl_program_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetProgramInfo_CALLBACK)(cl_program program, cl_program_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetProgramInfo_StubWithCallback(CMOCK_clGetProgramInfo_CALLBACK Callback);
#define clGetProgramBuildInfo_ExpectAndReturn(program, device, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetProgramBuildInfo_CMockExpectAndReturn(__LINE__, program, device, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetProgramBuildInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_program program, cl_device_id device, cl_program_build_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetProgramBuildInfo_CALLBACK)(cl_program program, cl_device_id device, cl_program_build_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetProgramBuildInfo_StubWithCallback(CMOCK_clGetProgramBuildInfo_CALLBACK Callback);
#define clCreateKernel_ExpectAndReturn(program, kernel_name, errcode_ret, cmock_retval) clCreateKernel_CMockExpectAndReturn(__LINE__, program, kernel_name, errcode_ret, cmock_retval)
void clCreateKernel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_program program, const char* kernel_name, cl_int* errcode_ret, cl_kernel cmock_to_return);
typedef cl_kernel (* CMOCK_clCreateKernel_CALLBACK)(cl_program program, const char* kernel_name, cl_int* errcode_ret, int cmock_num_calls);
void clCreateKernel_StubWithCallback(CMOCK_clCreateKernel_CALLBACK Callback);
#define clCreateKernelsInProgram_ExpectAndReturn(program, num_kernels, kernels, num_kernels_ret, cmock_retval) clCreateKernelsInProgram_CMockExpectAndReturn(__LINE__, program, num_kernels, kernels, num_kernels_ret, cmock_retval)
void clCreateKernelsInProgram_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_program program, cl_uint num_kernels, cl_kernel* kernels, cl_uint* num_kernels_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clCreateKernelsInProgram_CALLBACK)(cl_program program, cl_uint num_kernels, cl_kernel* kernels, cl_uint* num_kernels_ret, int cmock_num_calls);
void clCreateKernelsInProgram_StubWithCallback(CMOCK_clCreateKernelsInProgram_CALLBACK Callback);
#define clCloneKernel_ExpectAndReturn(source_kernel, errcode_ret, cmock_retval) clCloneKernel_CMockExpectAndReturn(__LINE__, source_kernel, errcode_ret, cmock_retval)
void clCloneKernel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_kernel source_kernel, cl_int* errcode_ret, cl_kernel cmock_to_return);
typedef cl_kernel (* CMOCK_clCloneKernel_CALLBACK)(cl_kernel source_kernel, cl_int* errcode_ret, int cmock_num_calls);
void clCloneKernel_StubWithCallback(CMOCK_clCloneKernel_CALLBACK Callback);
#define clRetainKernel_ExpectAndReturn(kernel, cmock_retval) clRetainKernel_CMockExpectAndReturn(__LINE__, kernel, cmock_retval)
void clRetainKernel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_kernel kernel, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clRetainKernel_CALLBACK)(cl_kernel kernel, int cmock_num_calls);
void clRetainKernel_StubWithCallback(CMOCK_clRetainKernel_CALLBACK Callback);
#define clReleaseKernel_ExpectAndReturn(kernel, cmock_retval) clReleaseKernel_CMockExpectAndReturn(__LINE__, kernel, cmock_retval)
void clReleaseKernel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_kernel kernel, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clReleaseKernel_CALLBACK)(cl_kernel kernel, int cmock_num_calls);
void clReleaseKernel_StubWithCallback(CMOCK_clReleaseKernel_CALLBACK Callback);
#define clSetKernelArg_ExpectAndReturn(kernel, arg_index, arg_size, arg_value, cmock_retval) clSetKernelArg_CMockExpectAndReturn(__LINE__, kernel, arg_index, arg_size, arg_value, cmock_retval)
void clSetKernelArg_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_kernel kernel, cl_uint arg_index, size_t arg_size, const void* arg_value, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clSetKernelArg_CALLBACK)(cl_kernel kernel, cl_uint arg_index, size_t arg_size, const void* arg_value, int cmock_num_calls);
void clSetKernelArg_StubWithCallback(CMOCK_clSetKernelArg_CALLBACK Callback);
#define clSetKernelArgSVMPointer_ExpectAndReturn(kernel, arg_index, arg_value, cmock_retval) clSetKernelArgSVMPointer_CMockExpectAndReturn(__LINE__, kernel, arg_index, arg_value, cmock_retval)
void clSetKernelArgSVMPointer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_kernel kernel, cl_uint arg_index, const void* arg_value, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clSetKernelArgSVMPointer_CALLBACK)(cl_kernel kernel, cl_uint arg_index, const void* arg_value, int cmock_num_calls);
void clSetKernelArgSVMPointer_StubWithCallback(CMOCK_clSetKernelArgSVMPointer_CALLBACK Callback);
#define clSetKernelExecInfo_ExpectAndReturn(kernel, param_name, param_value_size, param_value, cmock_retval) clSetKernelExecInfo_CMockExpectAndReturn(__LINE__, kernel, param_name, param_value_size, param_value, cmock_retval)
void clSetKernelExecInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_kernel kernel, cl_kernel_exec_info param_name, size_t param_value_size, const void* param_value, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clSetKernelExecInfo_CALLBACK)(cl_kernel kernel, cl_kernel_exec_info param_name, size_t param_value_size, const void* param_value, int cmock_num_calls);
void clSetKernelExecInfo_StubWithCallback(CMOCK_clSetKernelExecInfo_CALLBACK Callback);
#define clGetKernelInfo_ExpectAndReturn(kernel, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetKernelInfo_CMockExpectAndReturn(__LINE__, kernel, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetKernelInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_kernel kernel, cl_kernel_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetKernelInfo_CALLBACK)(cl_kernel kernel, cl_kernel_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetKernelInfo_StubWithCallback(CMOCK_clGetKernelInfo_CALLBACK Callback);
#define clGetKernelArgInfo_ExpectAndReturn(kernel, arg_indx, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetKernelArgInfo_CMockExpectAndReturn(__LINE__, kernel, arg_indx, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetKernelArgInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_kernel kernel, cl_uint arg_indx, cl_kernel_arg_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetKernelArgInfo_CALLBACK)(cl_kernel kernel, cl_uint arg_indx, cl_kernel_arg_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetKernelArgInfo_StubWithCallback(CMOCK_clGetKernelArgInfo_CALLBACK Callback);
#define clGetKernelWorkGroupInfo_ExpectAndReturn(kernel, device, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetKernelWorkGroupInfo_CMockExpectAndReturn(__LINE__, kernel, device, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetKernelWorkGroupInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_kernel kernel, cl_device_id device, cl_kernel_work_group_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetKernelWorkGroupInfo_CALLBACK)(cl_kernel kernel, cl_device_id device, cl_kernel_work_group_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetKernelWorkGroupInfo_StubWithCallback(CMOCK_clGetKernelWorkGroupInfo_CALLBACK Callback);
#define clGetKernelSubGroupInfo_ExpectAndReturn(kernel, device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetKernelSubGroupInfo_CMockExpectAndReturn(__LINE__, kernel, device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetKernelSubGroupInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_kernel kernel, cl_device_id device, cl_kernel_sub_group_info param_name, size_t input_value_size, const void* input_value, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetKernelSubGroupInfo_CALLBACK)(cl_kernel kernel, cl_device_id device, cl_kernel_sub_group_info param_name, size_t input_value_size, const void* input_value, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetKernelSubGroupInfo_StubWithCallback(CMOCK_clGetKernelSubGroupInfo_CALLBACK Callback);
#define clWaitForEvents_ExpectAndReturn(num_events, event_list, cmock_retval) clWaitForEvents_CMockExpectAndReturn(__LINE__, num_events, event_list, cmock_retval)
void clWaitForEvents_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_uint num_events, const cl_event* event_list, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clWaitForEvents_CALLBACK)(cl_uint num_events, const cl_event* event_list, int cmock_num_calls);
void clWaitForEvents_StubWithCallback(CMOCK_clWaitForEvents_CALLBACK Callback);
#define clGetEventInfo_ExpectAndReturn(event, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetEventInfo_CMockExpectAndReturn(__LINE__, event, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetEventInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_event event, cl_event_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetEventInfo_CALLBACK)(cl_event event, cl_event_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetEventInfo_StubWithCallback(CMOCK_clGetEventInfo_CALLBACK Callback);
#define clCreateUserEvent_ExpectAndReturn(context, errcode_ret, cmock_retval) clCreateUserEvent_CMockExpectAndReturn(__LINE__, context, errcode_ret, cmock_retval)
void clCreateUserEvent_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_int* errcode_ret, cl_event cmock_to_return);
typedef cl_event (* CMOCK_clCreateUserEvent_CALLBACK)(cl_context context, cl_int* errcode_ret, int cmock_num_calls);
void clCreateUserEvent_StubWithCallback(CMOCK_clCreateUserEvent_CALLBACK Callback);
#define clRetainEvent_ExpectAndReturn(event, cmock_retval) clRetainEvent_CMockExpectAndReturn(__LINE__, event, cmock_retval)
void clRetainEvent_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_event event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clRetainEvent_CALLBACK)(cl_event event, int cmock_num_calls);
void clRetainEvent_StubWithCallback(CMOCK_clRetainEvent_CALLBACK Callback);
#define clReleaseEvent_ExpectAndReturn(event, cmock_retval) clReleaseEvent_CMockExpectAndReturn(__LINE__, event, cmock_retval)
void clReleaseEvent_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_event event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clReleaseEvent_CALLBACK)(cl_event event, int cmock_num_calls);
void clReleaseEvent_StubWithCallback(CMOCK_clReleaseEvent_CALLBACK Callback);
#define clSetUserEventStatus_ExpectAndReturn(event, execution_status, cmock_retval) clSetUserEventStatus_CMockExpectAndReturn(__LINE__, event, execution_status, cmock_retval)
void clSetUserEventStatus_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_event event, cl_int execution_status, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clSetUserEventStatus_CALLBACK)(cl_event event, cl_int execution_status, int cmock_num_calls);
void clSetUserEventStatus_StubWithCallback(CMOCK_clSetUserEventStatus_CALLBACK Callback);
#define clSetEventCallback_ExpectAndReturn(event, command_exec_callback_type, pfn_notify, user_data, cmock_retval) clSetEventCallback_CMockExpectAndReturn(__LINE__, event, command_exec_callback_type, pfn_notify, user_data, cmock_retval)
void clSetEventCallback_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_event event, cl_int command_exec_callback_type, cmock_cl_func_ptr9 pfn_notify, void* user_data, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clSetEventCallback_CALLBACK)(cl_event event, cl_int command_exec_callback_type, cmock_cl_func_ptr9 pfn_notify, void* user_data, int cmock_num_calls);
void clSetEventCallback_StubWithCallback(CMOCK_clSetEventCallback_CALLBACK Callback);
#define clGetEventProfilingInfo_ExpectAndReturn(event, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetEventProfilingInfo_CMockExpectAndReturn(__LINE__, event, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetEventProfilingInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_event event, cl_profiling_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetEventProfilingInfo_CALLBACK)(cl_event event, cl_profiling_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetEventProfilingInfo_StubWithCallback(CMOCK_clGetEventProfilingInfo_CALLBACK Callback);
#define clFlush_ExpectAndReturn(command_queue, cmock_retval) clFlush_CMockExpectAndReturn(__LINE__, command_queue, cmock_retval)
void clFlush_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clFlush_CALLBACK)(cl_command_queue command_queue, int cmock_num_calls);
void clFlush_StubWithCallback(CMOCK_clFlush_CALLBACK Callback);
#define clFinish_ExpectAndReturn(command_queue, cmock_retval) clFinish_CMockExpectAndReturn(__LINE__, command_queue, cmock_retval)
void clFinish_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clFinish_CALLBACK)(cl_command_queue command_queue, int cmock_num_calls);
void clFinish_StubWithCallback(CMOCK_clFinish_CALLBACK Callback);
#define clEnqueueReadBuffer_ExpectAndReturn(command_queue, buffer, blocking_read, offset, size, ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueReadBuffer_CMockExpectAndReturn(__LINE__, command_queue, buffer, blocking_read, offset, size, ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueReadBuffer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_read, size_t offset, size_t size, void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueReadBuffer_CALLBACK)(cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_read, size_t offset, size_t size, void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueReadBuffer_StubWithCallback(CMOCK_clEnqueueReadBuffer_CALLBACK Callback);
#define clEnqueueReadBufferRect_ExpectAndReturn(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueReadBufferRect_CMockExpectAndReturn(__LINE__, command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueReadBufferRect_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_read, const size_t* buffer_origin, const size_t* host_origin, const size_t* region, size_t buffer_row_pitch, size_t buffer_slice_pitch, size_t host_row_pitch, size_t host_slice_pitch, void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueReadBufferRect_CALLBACK)(cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_read, const size_t* buffer_origin, const size_t* host_origin, const size_t* region, size_t buffer_row_pitch, size_t buffer_slice_pitch, size_t host_row_pitch, size_t host_slice_pitch, void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueReadBufferRect_StubWithCallback(CMOCK_clEnqueueReadBufferRect_CALLBACK Callback);
#define clEnqueueWriteBuffer_ExpectAndReturn(command_queue, buffer, blocking_write, offset, size, ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueWriteBuffer_CMockExpectAndReturn(__LINE__, command_queue, buffer, blocking_write, offset, size, ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueWriteBuffer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_write, size_t offset, size_t size, const void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueWriteBuffer_CALLBACK)(cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_write, size_t offset, size_t size, const void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueWriteBuffer_StubWithCallback(CMOCK_clEnqueueWriteBuffer_CALLBACK Callback);
#define clEnqueueWriteBufferRect_ExpectAndReturn(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueWriteBufferRect_CMockExpectAndReturn(__LINE__, command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueWriteBufferRect_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_write, const size_t* buffer_origin, const size_t* host_origin, const size_t* region, size_t buffer_row_pitch, size_t buffer_slice_pitch, size_t host_row_pitch, size_t host_slice_pitch, const void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueWriteBufferRect_CALLBACK)(cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_write, const size_t* buffer_origin, const size_t* host_origin, const size_t* region, size_t buffer_row_pitch, size_t buffer_slice_pitch, size_t host_row_pitch, size_t host_slice_pitch, const void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueWriteBufferRect_StubWithCallback(CMOCK_clEnqueueWriteBufferRect_CALLBACK Callback);
#define clEnqueueFillBuffer_ExpectAndReturn(command_queue, buffer, pattern, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueFillBuffer_CMockExpectAndReturn(__LINE__, command_queue, buffer, pattern, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueFillBuffer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_mem buffer, const void* pattern, size_t pattern_size, size_t offset, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueFillBuffer_CALLBACK)(cl_command_queue command_queue, cl_mem buffer, const void* pattern, size_t pattern_size, size_t offset, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueFillBuffer_StubWithCallback(CMOCK_clEnqueueFillBuffer_CALLBACK Callback);
#define clEnqueueCopyBuffer_ExpectAndReturn(command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueCopyBuffer_CMockExpectAndReturn(__LINE__, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueCopyBuffer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_buffer, size_t src_offset, size_t dst_offset, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueCopyBuffer_CALLBACK)(cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_buffer, size_t src_offset, size_t dst_offset, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueCopyBuffer_StubWithCallback(CMOCK_clEnqueueCopyBuffer_CALLBACK Callback);
#define clEnqueueCopyBufferRect_ExpectAndReturn(command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueCopyBufferRect_CMockExpectAndReturn(__LINE__, command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueCopyBufferRect_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_buffer, const size_t* src_origin, const size_t* dst_origin, const size_t* region, size_t src_row_pitch, size_t src_slice_pitch, size_t dst_row_pitch, size_t dst_slice_pitch, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueCopyBufferRect_CALLBACK)(cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_buffer, const size_t* src_origin, const size_t* dst_origin, const size_t* region, size_t src_row_pitch, size_t src_slice_pitch, size_t dst_row_pitch, size_t dst_slice_pitch, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueCopyBufferRect_StubWithCallback(CMOCK_clEnqueueCopyBufferRect_CALLBACK Callback);
#define clEnqueueReadImage_ExpectAndReturn(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueReadImage_CMockExpectAndReturn(__LINE__, command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueReadImage_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_mem image, cl_bool blocking_read, const size_t* origin, const size_t* region, size_t row_pitch, size_t slice_pitch, void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueReadImage_CALLBACK)(cl_command_queue command_queue, cl_mem image, cl_bool blocking_read, const size_t* origin, const size_t* region, size_t row_pitch, size_t slice_pitch, void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueReadImage_StubWithCallback(CMOCK_clEnqueueReadImage_CALLBACK Callback);
#define clEnqueueWriteImage_ExpectAndReturn(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueWriteImage_CMockExpectAndReturn(__LINE__, command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueWriteImage_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_mem image, cl_bool blocking_write, const size_t* origin, const size_t* region, size_t input_row_pitch, size_t input_slice_pitch, const void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueWriteImage_CALLBACK)(cl_command_queue command_queue, cl_mem image, cl_bool blocking_write, const size_t* origin, const size_t* region, size_t input_row_pitch, size_t input_slice_pitch, const void* ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueWriteImage_StubWithCallback(CMOCK_clEnqueueWriteImage_CALLBACK Callback);
#define clEnqueueFillImage_ExpectAndReturn(command_queue, image, fill_color, origin, region, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueFillImage_CMockExpectAndReturn(__LINE__, command_queue, image, fill_color, origin, region, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueFillImage_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_mem image, const void* fill_color, const size_t* origin, const size_t* region, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueFillImage_CALLBACK)(cl_command_queue command_queue, cl_mem image, const void* fill_color, const size_t* origin, const size_t* region, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueFillImage_StubWithCallback(CMOCK_clEnqueueFillImage_CALLBACK Callback);
#define clEnqueueCopyImage_ExpectAndReturn(command_queue, src_image, dst_image, src_origin, dst_origin, region, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueCopyImage_CMockExpectAndReturn(__LINE__, command_queue, src_image, dst_image, src_origin, dst_origin, region, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueCopyImage_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_mem src_image, cl_mem dst_image, const size_t* src_origin, const size_t* dst_origin, const size_t* region, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueCopyImage_CALLBACK)(cl_command_queue command_queue, cl_mem src_image, cl_mem dst_image, const size_t* src_origin, const size_t* dst_origin, const size_t* region, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueCopyImage_StubWithCallback(CMOCK_clEnqueueCopyImage_CALLBACK Callback);
#define clEnqueueCopyImageToBuffer_ExpectAndReturn(command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueCopyImageToBuffer_CMockExpectAndReturn(__LINE__, command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueCopyImageToBuffer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_mem src_image, cl_mem dst_buffer, const size_t* src_origin, const size_t* region, size_t dst_offset, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueCopyImageToBuffer_CALLBACK)(cl_command_queue command_queue, cl_mem src_image, cl_mem dst_buffer, const size_t* src_origin, const size_t* region, size_t dst_offset, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueCopyImageToBuffer_StubWithCallback(CMOCK_clEnqueueCopyImageToBuffer_CALLBACK Callback);
#define clEnqueueCopyBufferToImage_ExpectAndReturn(command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueCopyBufferToImage_CMockExpectAndReturn(__LINE__, command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueCopyBufferToImage_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_image, size_t src_offset, const size_t* dst_origin, const size_t* region, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueCopyBufferToImage_CALLBACK)(cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_image, size_t src_offset, const size_t* dst_origin, const size_t* region, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueCopyBufferToImage_StubWithCallback(CMOCK_clEnqueueCopyBufferToImage_CALLBACK Callback);
#define clEnqueueMapBuffer_ExpectAndReturn(command_queue, buffer, blocking_map, map_flags, offset, size, num_events_in_wait_list, event_wait_list, event, errcode_ret, cmock_retval) clEnqueueMapBuffer_CMockExpectAndReturn(__LINE__, command_queue, buffer, blocking_map, map_flags, offset, size, num_events_in_wait_list, event_wait_list, event, errcode_ret, cmock_retval)
void clEnqueueMapBuffer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_map, cl_map_flags map_flags, size_t offset, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int* errcode_ret, void* cmock_to_return);
typedef void* (* CMOCK_clEnqueueMapBuffer_CALLBACK)(cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_map, cl_map_flags map_flags, size_t offset, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int* errcode_ret, int cmock_num_calls);
void clEnqueueMapBuffer_StubWithCallback(CMOCK_clEnqueueMapBuffer_CALLBACK Callback);
#define clEnqueueMapImage_ExpectAndReturn(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, event, errcode_ret, cmock_retval) clEnqueueMapImage_CMockExpectAndReturn(__LINE__, command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, event, errcode_ret, cmock_retval)
void clEnqueueMapImage_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_mem image, cl_bool blocking_map, cl_map_flags map_flags, const size_t* origin, const size_t* region, size_t* image_row_pitch, size_t* image_slice_pitch, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int* errcode_ret, void* cmock_to_return);
typedef void* (* CMOCK_clEnqueueMapImage_CALLBACK)(cl_command_queue command_queue, cl_mem image, cl_bool blocking_map, cl_map_flags map_flags, const size_t* origin, const size_t* region, size_t* image_row_pitch, size_t* image_slice_pitch, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int* errcode_ret, int cmock_num_calls);
void clEnqueueMapImage_StubWithCallback(CMOCK_clEnqueueMapImage_CALLBACK Callback);
#define clEnqueueUnmapMemObject_ExpectAndReturn(command_queue, memobj, mapped_ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueUnmapMemObject_CMockExpectAndReturn(__LINE__, command_queue, memobj, mapped_ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueUnmapMemObject_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_mem memobj, void* mapped_ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueUnmapMemObject_CALLBACK)(cl_command_queue command_queue, cl_mem memobj, void* mapped_ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueUnmapMemObject_StubWithCallback(CMOCK_clEnqueueUnmapMemObject_CALLBACK Callback);
#define clEnqueueMigrateMemObjects_ExpectAndReturn(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueMigrateMemObjects_CMockExpectAndReturn(__LINE__, command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueMigrateMemObjects_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_uint num_mem_objects, const cl_mem* mem_objects, cl_mem_migration_flags flags, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueMigrateMemObjects_CALLBACK)(cl_command_queue command_queue, cl_uint num_mem_objects, const cl_mem* mem_objects, cl_mem_migration_flags flags, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueMigrateMemObjects_StubWithCallback(CMOCK_clEnqueueMigrateMemObjects_CALLBACK Callback);
#define clEnqueueNDRangeKernel_ExpectAndReturn(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueNDRangeKernel_CMockExpectAndReturn(__LINE__, command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueNDRangeKernel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_kernel kernel, cl_uint work_dim, const size_t* global_work_offset, const size_t* global_work_size, const size_t* local_work_size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueNDRangeKernel_CALLBACK)(cl_command_queue command_queue, cl_kernel kernel, cl_uint work_dim, const size_t* global_work_offset, const size_t* global_work_size, const size_t* local_work_size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueNDRangeKernel_StubWithCallback(CMOCK_clEnqueueNDRangeKernel_CALLBACK Callback);
#define clEnqueueNativeKernel_ExpectAndReturn(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueNativeKernel_CMockExpectAndReturn(__LINE__, command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueNativeKernel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cmock_cl_func_ptr10 user_func, void* args, size_t cb_args, cl_uint num_mem_objects, const cl_mem* mem_list, const void** args_mem_loc, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueNativeKernel_CALLBACK)(cl_command_queue command_queue, cmock_cl_func_ptr10 user_func, void* args, size_t cb_args, cl_uint num_mem_objects, const cl_mem* mem_list, const void** args_mem_loc, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueNativeKernel_StubWithCallback(CMOCK_clEnqueueNativeKernel_CALLBACK Callback);
#define clEnqueueMarkerWithWaitList_ExpectAndReturn(command_queue, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueMarkerWithWaitList_CMockExpectAndReturn(__LINE__, command_queue, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueMarkerWithWaitList_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueMarkerWithWaitList_CALLBACK)(cl_command_queue command_queue, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueMarkerWithWaitList_StubWithCallback(CMOCK_clEnqueueMarkerWithWaitList_CALLBACK Callback);
#define clEnqueueBarrierWithWaitList_ExpectAndReturn(command_queue, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueBarrierWithWaitList_CMockExpectAndReturn(__LINE__, command_queue, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueBarrierWithWaitList_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueBarrierWithWaitList_CALLBACK)(cl_command_queue command_queue, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueBarrierWithWaitList_StubWithCallback(CMOCK_clEnqueueBarrierWithWaitList_CALLBACK Callback);
#define clEnqueueSVMFree_ExpectAndReturn(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueSVMFree_CMockExpectAndReturn(__LINE__, command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueSVMFree_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_uint num_svm_pointers, void** svm_pointers, cmock_cl_func_ptr11 pfn_free_func, void* user_data, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueSVMFree_CALLBACK)(cl_command_queue command_queue, cl_uint num_svm_pointers, void** svm_pointers, cmock_cl_func_ptr11 pfn_free_func, void* user_data, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueSVMFree_StubWithCallback(CMOCK_clEnqueueSVMFree_CALLBACK Callback);
#define clEnqueueSVMMemcpy_ExpectAndReturn(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueSVMMemcpy_CMockExpectAndReturn(__LINE__, command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueSVMMemcpy_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_bool blocking_copy, void* dst_ptr, const void* src_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueSVMMemcpy_CALLBACK)(cl_command_queue command_queue, cl_bool blocking_copy, void* dst_ptr, const void* src_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueSVMMemcpy_StubWithCallback(CMOCK_clEnqueueSVMMemcpy_CALLBACK Callback);
#define clEnqueueSVMMemFill_ExpectAndReturn(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueSVMMemFill_CMockExpectAndReturn(__LINE__, command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueSVMMemFill_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, void* svm_ptr, const void* pattern, size_t pattern_size, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueSVMMemFill_CALLBACK)(cl_command_queue command_queue, void* svm_ptr, const void* pattern, size_t pattern_size, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueSVMMemFill_StubWithCallback(CMOCK_clEnqueueSVMMemFill_CALLBACK Callback);
#define clEnqueueSVMMap_ExpectAndReturn(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueSVMMap_CMockExpectAndReturn(__LINE__, command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueSVMMap_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_bool blocking_map, cl_map_flags flags, void* svm_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueSVMMap_CALLBACK)(cl_command_queue command_queue, cl_bool blocking_map, cl_map_flags flags, void* svm_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueSVMMap_StubWithCallback(CMOCK_clEnqueueSVMMap_CALLBACK Callback);
#define clEnqueueSVMUnmap_ExpectAndReturn(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueSVMUnmap_CMockExpectAndReturn(__LINE__, command_queue, svm_ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueSVMUnmap_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, void* svm_ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueSVMUnmap_CALLBACK)(cl_command_queue command_queue, void* svm_ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueSVMUnmap_StubWithCallback(CMOCK_clEnqueueSVMUnmap_CALLBACK Callback);
#define clEnqueueSVMMigrateMem_ExpectAndReturn(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueSVMMigrateMem_CMockExpectAndReturn(__LINE__, command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueSVMMigrateMem_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_uint num_svm_pointers, const void** svm_pointers, const size_t* sizes, cl_mem_migration_flags flags, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueSVMMigrateMem_CALLBACK)(cl_command_queue command_queue, cl_uint num_svm_pointers, const void** svm_pointers, const size_t* sizes, cl_mem_migration_flags flags, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueSVMMigrateMem_StubWithCallback(CMOCK_clEnqueueSVMMigrateMem_CALLBACK Callback);
#define clGetExtensionFunctionAddressForPlatform_ExpectAndReturn(platform, func_name, cmock_retval) clGetExtensionFunctionAddressForPlatform_CMockExpectAndReturn(__LINE__, platform, func_name, cmock_retval)
void clGetExtensionFunctionAddressForPlatform_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_platform_id platform, const char* func_name, void* cmock_to_return);
typedef void* (* CMOCK_clGetExtensionFunctionAddressForPlatform_CALLBACK)(cl_platform_id platform, const char* func_name, int cmock_num_calls);
void clGetExtensionFunctionAddressForPlatform_StubWithCallback(CMOCK_clGetExtensionFunctionAddressForPlatform_CALLBACK Callback);
#define clSetCommandQueueProperty_ExpectAndReturn(command_queue, properties, enable, old_properties, cmock_retval) clSetCommandQueueProperty_CMockExpectAndReturn(__LINE__, command_queue, properties, enable, old_properties, cmock_retval)
void clSetCommandQueueProperty_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_command_queue_properties properties, cl_bool enable, cl_command_queue_properties* old_properties, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clSetCommandQueueProperty_CALLBACK)(cl_command_queue command_queue, cl_command_queue_properties properties, cl_bool enable, cl_command_queue_properties* old_properties, int cmock_num_calls);
void clSetCommandQueueProperty_StubWithCallback(CMOCK_clSetCommandQueueProperty_CALLBACK Callback);
#define clCreateImage2D_ExpectAndReturn(context, flags, image_format, image_width, image_height, image_row_pitch, host_ptr, errcode_ret, cmock_retval) clCreateImage2D_CMockExpectAndReturn(__LINE__, context, flags, image_format, image_width, image_height, image_row_pitch, host_ptr, errcode_ret, cmock_retval)
void clCreateImage2D_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_mem_flags flags, const cl_image_format* image_format, size_t image_width, size_t image_height, size_t image_row_pitch, void* host_ptr, cl_int* errcode_ret, CL_API_PREFIX__VERSION_1_1_DEPRECATED cl_mem cmock_to_return);
typedef CL_API_PREFIX__VERSION_1_1_DEPRECATED cl_mem (* CMOCK_clCreateImage2D_CALLBACK)(cl_context context, cl_mem_flags flags, const cl_image_format* image_format, size_t image_width, size_t image_height, size_t image_row_pitch, void* host_ptr, cl_int* errcode_ret, int cmock_num_calls);
void clCreateImage2D_StubWithCallback(CMOCK_clCreateImage2D_CALLBACK Callback);
#define clCreateImage3D_ExpectAndReturn(context, flags, image_format, image_width, image_height, image_depth, image_row_pitch, image_slice_pitch, host_ptr, errcode_ret, cmock_retval) clCreateImage3D_CMockExpectAndReturn(__LINE__, context, flags, image_format, image_width, image_height, image_depth, image_row_pitch, image_slice_pitch, host_ptr, errcode_ret, cmock_retval)
void clCreateImage3D_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_mem_flags flags, const cl_image_format* image_format, size_t image_width, size_t image_height, size_t image_depth, size_t image_row_pitch, size_t image_slice_pitch, void* host_ptr, cl_int* errcode_ret, CL_API_PREFIX__VERSION_1_1_DEPRECATED cl_mem cmock_to_return);
typedef CL_API_PREFIX__VERSION_1_1_DEPRECATED cl_mem (* CMOCK_clCreateImage3D_CALLBACK)(cl_context context, cl_mem_flags flags, const cl_image_format* image_format, size_t image_width, size_t image_height, size_t image_depth, size_t image_row_pitch, size_t image_slice_pitch, void* host_ptr, cl_int* errcode_ret, int cmock_num_calls);
void clCreateImage3D_StubWithCallback(CMOCK_clCreateImage3D_CALLBACK Callback);
#define clEnqueueMarker_ExpectAndReturn(command_queue, event, cmock_retval) clEnqueueMarker_CMockExpectAndReturn(__LINE__, command_queue, event, cmock_retval)
void clEnqueueMarker_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_event* event, CL_API_PREFIX__VERSION_1_1_DEPRECATED cl_int cmock_to_return);
typedef CL_API_PREFIX__VERSION_1_1_DEPRECATED cl_int (* CMOCK_clEnqueueMarker_CALLBACK)(cl_command_queue command_queue, cl_event* event, int cmock_num_calls);
void clEnqueueMarker_StubWithCallback(CMOCK_clEnqueueMarker_CALLBACK Callback);
#define clEnqueueWaitForEvents_ExpectAndReturn(command_queue, num_events, event_list, cmock_retval) clEnqueueWaitForEvents_CMockExpectAndReturn(__LINE__, command_queue, num_events, event_list, cmock_retval)
void clEnqueueWaitForEvents_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_uint num_events, const cl_event* event_list, CL_API_PREFIX__VERSION_1_1_DEPRECATED cl_int cmock_to_return);
typedef CL_API_PREFIX__VERSION_1_1_DEPRECATED cl_int (* CMOCK_clEnqueueWaitForEvents_CALLBACK)(cl_command_queue command_queue, cl_uint num_events, const cl_event* event_list, int cmock_num_calls);
void clEnqueueWaitForEvents_StubWithCallback(CMOCK_clEnqueueWaitForEvents_CALLBACK Callback);
#define clEnqueueBarrier_ExpectAndReturn(command_queue, cmock_retval) clEnqueueBarrier_CMockExpectAndReturn(__LINE__, command_queue, cmock_retval)
void clEnqueueBarrier_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, CL_API_PREFIX__VERSION_1_1_DEPRECATED cl_int cmock_to_return);
typedef CL_API_PREFIX__VERSION_1_1_DEPRECATED cl_int (* CMOCK_clEnqueueBarrier_CALLBACK)(cl_command_queue command_queue, int cmock_num_calls);
void clEnqueueBarrier_StubWithCallback(CMOCK_clEnqueueBarrier_CALLBACK Callback);
#define clUnloadCompiler_ExpectAndReturn(cmock_retval) clUnloadCompiler_CMockExpectAndReturn(__LINE__, cmock_retval)
void clUnloadCompiler_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CL_API_PREFIX__VERSION_1_1_DEPRECATED cl_int cmock_to_return);
typedef CL_API_PREFIX__VERSION_1_1_DEPRECATED cl_int (* CMOCK_clUnloadCompiler_CALLBACK)(int cmock_num_calls);
void clUnloadCompiler_StubWithCallback(CMOCK_clUnloadCompiler_CALLBACK Callback);
#define clGetExtensionFunctionAddress_ExpectAndReturn(func_name, cmock_retval) clGetExtensionFunctionAddress_CMockExpectAndReturn(__LINE__, func_name, cmock_retval)
void clGetExtensionFunctionAddress_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* func_name, CL_API_PREFIX__VERSION_1_1_DEPRECATED void* cmock_to_return);
typedef CL_API_PREFIX__VERSION_1_1_DEPRECATED void* (* CMOCK_clGetExtensionFunctionAddress_CALLBACK)(const char* func_name, int cmock_num_calls);
void clGetExtensionFunctionAddress_StubWithCallback(CMOCK_clGetExtensionFunctionAddress_CALLBACK Callback);
#define clCreateCommandQueue_ExpectAndReturn(context, device, properties, errcode_ret, cmock_retval) clCreateCommandQueue_CMockExpectAndReturn(__LINE__, context, device, properties, errcode_ret, cmock_retval)
void clCreateCommandQueue_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_device_id device, cl_command_queue_properties properties, cl_int* errcode_ret, CL_API_PREFIX__VERSION_1_2_DEPRECATED cl_command_queue cmock_to_return);
typedef CL_API_PREFIX__VERSION_1_2_DEPRECATED cl_command_queue (* CMOCK_clCreateCommandQueue_CALLBACK)(cl_context context, cl_device_id device, cl_command_queue_properties properties, cl_int* errcode_ret, int cmock_num_calls);
void clCreateCommandQueue_StubWithCallback(CMOCK_clCreateCommandQueue_CALLBACK Callback);
#define clCreateSampler_ExpectAndReturn(context, normalized_coords, addressing_mode, filter_mode, errcode_ret, cmock_retval) clCreateSampler_CMockExpectAndReturn(__LINE__, context, normalized_coords, addressing_mode, filter_mode, errcode_ret, cmock_retval)
void clCreateSampler_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_bool normalized_coords, cl_addressing_mode addressing_mode, cl_filter_mode filter_mode, cl_int* errcode_ret, CL_API_PREFIX__VERSION_1_2_DEPRECATED cl_sampler cmock_to_return);
typedef CL_API_PREFIX__VERSION_1_2_DEPRECATED cl_sampler (* CMOCK_clCreateSampler_CALLBACK)(cl_context context, cl_bool normalized_coords, cl_addressing_mode addressing_mode, cl_filter_mode filter_mode, cl_int* errcode_ret, int cmock_num_calls);
void clCreateSampler_StubWithCallback(CMOCK_clCreateSampler_CALLBACK Callback);
#define clEnqueueTask_ExpectAndReturn(command_queue, kernel, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueTask_CMockExpectAndReturn(__LINE__, command_queue, kernel, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueTask_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_kernel kernel, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, CL_API_PREFIX__VERSION_1_2_DEPRECATED cl_int cmock_to_return);
typedef CL_API_PREFIX__VERSION_1_2_DEPRECATED cl_int (* CMOCK_clEnqueueTask_CALLBACK)(cl_command_queue command_queue, cl_kernel kernel, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueTask_StubWithCallback(CMOCK_clEnqueueTask_CALLBACK Callback);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
