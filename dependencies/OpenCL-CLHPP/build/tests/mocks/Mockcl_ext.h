/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKCL_EXT_H
#define _MOCKCL_EXT_H

#include "CL/cl_platform.h"
#include "cl_ext.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockcl_ext_Init(void);
void Mockcl_ext_Destroy(void);
void Mockcl_ext_Verify(void);


typedef void(*cmock_cl_ext_func_ptr1)(cl_mem memobj, void* user_data);
typedef void(*cmock_cl_ext_func_ptr2)(cl_command_queue queue, cl_uint num_svm_pointers, void** svm_pointers, void* user_data);


#define clCreateCommandBufferKHR_ExpectAndReturn(num_queues, queues, properties, errcode_ret, cmock_retval) clCreateCommandBufferKHR_CMockExpectAndReturn(__LINE__, num_queues, queues, properties, errcode_ret, cmock_retval)
void clCreateCommandBufferKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_uint num_queues, const cl_command_queue* queues, const cl_command_buffer_properties_khr* properties, cl_int* errcode_ret, cl_command_buffer_khr cmock_to_return);
typedef cl_command_buffer_khr (* CMOCK_clCreateCommandBufferKHR_CALLBACK)(cl_uint num_queues, const cl_command_queue* queues, const cl_command_buffer_properties_khr* properties, cl_int* errcode_ret, int cmock_num_calls);
void clCreateCommandBufferKHR_StubWithCallback(CMOCK_clCreateCommandBufferKHR_CALLBACK Callback);
#define clFinalizeCommandBufferKHR_ExpectAndReturn(command_buffer, cmock_retval) clFinalizeCommandBufferKHR_CMockExpectAndReturn(__LINE__, command_buffer, cmock_retval)
void clFinalizeCommandBufferKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_buffer_khr command_buffer, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clFinalizeCommandBufferKHR_CALLBACK)(cl_command_buffer_khr command_buffer, int cmock_num_calls);
void clFinalizeCommandBufferKHR_StubWithCallback(CMOCK_clFinalizeCommandBufferKHR_CALLBACK Callback);
#define clRetainCommandBufferKHR_ExpectAndReturn(command_buffer, cmock_retval) clRetainCommandBufferKHR_CMockExpectAndReturn(__LINE__, command_buffer, cmock_retval)
void clRetainCommandBufferKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_buffer_khr command_buffer, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clRetainCommandBufferKHR_CALLBACK)(cl_command_buffer_khr command_buffer, int cmock_num_calls);
void clRetainCommandBufferKHR_StubWithCallback(CMOCK_clRetainCommandBufferKHR_CALLBACK Callback);
#define clReleaseCommandBufferKHR_ExpectAndReturn(command_buffer, cmock_retval) clReleaseCommandBufferKHR_CMockExpectAndReturn(__LINE__, command_buffer, cmock_retval)
void clReleaseCommandBufferKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_buffer_khr command_buffer, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clReleaseCommandBufferKHR_CALLBACK)(cl_command_buffer_khr command_buffer, int cmock_num_calls);
void clReleaseCommandBufferKHR_StubWithCallback(CMOCK_clReleaseCommandBufferKHR_CALLBACK Callback);
#define clEnqueueCommandBufferKHR_ExpectAndReturn(num_queues, queues, command_buffer, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueCommandBufferKHR_CMockExpectAndReturn(__LINE__, num_queues, queues, command_buffer, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueCommandBufferKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_uint num_queues, cl_command_queue* queues, cl_command_buffer_khr command_buffer, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueCommandBufferKHR_CALLBACK)(cl_uint num_queues, cl_command_queue* queues, cl_command_buffer_khr command_buffer, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueCommandBufferKHR_StubWithCallback(CMOCK_clEnqueueCommandBufferKHR_CALLBACK Callback);
#define clCommandBarrierWithWaitListKHR_ExpectAndReturn(command_buffer, command_queue, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval) clCommandBarrierWithWaitListKHR_CMockExpectAndReturn(__LINE__, command_buffer, command_queue, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval)
void clCommandBarrierWithWaitListKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clCommandBarrierWithWaitListKHR_CALLBACK)(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, int cmock_num_calls);
void clCommandBarrierWithWaitListKHR_StubWithCallback(CMOCK_clCommandBarrierWithWaitListKHR_CALLBACK Callback);
#define clCommandCopyBufferKHR_ExpectAndReturn(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval) clCommandCopyBufferKHR_CMockExpectAndReturn(__LINE__, command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval)
void clCommandCopyBufferKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_buffer, size_t src_offset, size_t dst_offset, size_t size, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clCommandCopyBufferKHR_CALLBACK)(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_buffer, size_t src_offset, size_t dst_offset, size_t size, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, int cmock_num_calls);
void clCommandCopyBufferKHR_StubWithCallback(CMOCK_clCommandCopyBufferKHR_CALLBACK Callback);
#define clCommandCopyBufferRectKHR_ExpectAndReturn(command_buffer, command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval) clCommandCopyBufferRectKHR_CMockExpectAndReturn(__LINE__, command_buffer, command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval)
void clCommandCopyBufferRectKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_buffer, const size_t* src_origin, const size_t* dst_origin, const size_t* region, size_t src_row_pitch, size_t src_slice_pitch, size_t dst_row_pitch, size_t dst_slice_pitch, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clCommandCopyBufferRectKHR_CALLBACK)(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_buffer, const size_t* src_origin, const size_t* dst_origin, const size_t* region, size_t src_row_pitch, size_t src_slice_pitch, size_t dst_row_pitch, size_t dst_slice_pitch, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, int cmock_num_calls);
void clCommandCopyBufferRectKHR_StubWithCallback(CMOCK_clCommandCopyBufferRectKHR_CALLBACK Callback);
#define clCommandCopyBufferToImageKHR_ExpectAndReturn(command_buffer, command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval) clCommandCopyBufferToImageKHR_CMockExpectAndReturn(__LINE__, command_buffer, command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval)
void clCommandCopyBufferToImageKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_image, size_t src_offset, const size_t* dst_origin, const size_t* region, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clCommandCopyBufferToImageKHR_CALLBACK)(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_image, size_t src_offset, const size_t* dst_origin, const size_t* region, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, int cmock_num_calls);
void clCommandCopyBufferToImageKHR_StubWithCallback(CMOCK_clCommandCopyBufferToImageKHR_CALLBACK Callback);
#define clCommandCopyImageKHR_ExpectAndReturn(command_buffer, command_queue, src_image, dst_image, src_origin, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval) clCommandCopyImageKHR_CMockExpectAndReturn(__LINE__, command_buffer, command_queue, src_image, dst_image, src_origin, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval)
void clCommandCopyImageKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem src_image, cl_mem dst_image, const size_t* src_origin, const size_t* dst_origin, const size_t* region, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clCommandCopyImageKHR_CALLBACK)(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem src_image, cl_mem dst_image, const size_t* src_origin, const size_t* dst_origin, const size_t* region, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, int cmock_num_calls);
void clCommandCopyImageKHR_StubWithCallback(CMOCK_clCommandCopyImageKHR_CALLBACK Callback);
#define clCommandCopyImageToBufferKHR_ExpectAndReturn(command_buffer, command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval) clCommandCopyImageToBufferKHR_CMockExpectAndReturn(__LINE__, command_buffer, command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval)
void clCommandCopyImageToBufferKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem src_image, cl_mem dst_buffer, const size_t* src_origin, const size_t* region, size_t dst_offset, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clCommandCopyImageToBufferKHR_CALLBACK)(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem src_image, cl_mem dst_buffer, const size_t* src_origin, const size_t* region, size_t dst_offset, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, int cmock_num_calls);
void clCommandCopyImageToBufferKHR_StubWithCallback(CMOCK_clCommandCopyImageToBufferKHR_CALLBACK Callback);
#define clCommandFillBufferKHR_ExpectAndReturn(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval) clCommandFillBufferKHR_CMockExpectAndReturn(__LINE__, command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval)
void clCommandFillBufferKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem buffer, const void* pattern, size_t pattern_size, size_t offset, size_t size, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clCommandFillBufferKHR_CALLBACK)(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem buffer, const void* pattern, size_t pattern_size, size_t offset, size_t size, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, int cmock_num_calls);
void clCommandFillBufferKHR_StubWithCallback(CMOCK_clCommandFillBufferKHR_CALLBACK Callback);
#define clCommandFillImageKHR_ExpectAndReturn(command_buffer, command_queue, image, fill_color, origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval) clCommandFillImageKHR_CMockExpectAndReturn(__LINE__, command_buffer, command_queue, image, fill_color, origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval)
void clCommandFillImageKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem image, const void* fill_color, const size_t* origin, const size_t* region, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clCommandFillImageKHR_CALLBACK)(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, cl_mem image, const void* fill_color, const size_t* origin, const size_t* region, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, int cmock_num_calls);
void clCommandFillImageKHR_StubWithCallback(CMOCK_clCommandFillImageKHR_CALLBACK Callback);
#define clCommandNDRangeKernelKHR_ExpectAndReturn(command_buffer, command_queue, properties, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval) clCommandNDRangeKernelKHR_CMockExpectAndReturn(__LINE__, command_buffer, command_queue, properties, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle, cmock_retval)
void clCommandNDRangeKernelKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_buffer_khr command_buffer, cl_command_queue command_queue, const cl_ndrange_kernel_command_properties_khr* properties, cl_kernel kernel, cl_uint work_dim, const size_t* global_work_offset, const size_t* global_work_size, const size_t* local_work_size, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clCommandNDRangeKernelKHR_CALLBACK)(cl_command_buffer_khr command_buffer, cl_command_queue command_queue, const cl_ndrange_kernel_command_properties_khr* properties, cl_kernel kernel, cl_uint work_dim, const size_t* global_work_offset, const size_t* global_work_size, const size_t* local_work_size, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr* sync_point_wait_list, cl_sync_point_khr* sync_point, cl_mutable_command_khr* mutable_handle, int cmock_num_calls);
void clCommandNDRangeKernelKHR_StubWithCallback(CMOCK_clCommandNDRangeKernelKHR_CALLBACK Callback);
#define clGetCommandBufferInfoKHR_ExpectAndReturn(command_buffer, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetCommandBufferInfoKHR_CMockExpectAndReturn(__LINE__, command_buffer, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetCommandBufferInfoKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_buffer_khr command_buffer, cl_command_buffer_info_khr param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetCommandBufferInfoKHR_CALLBACK)(cl_command_buffer_khr command_buffer, cl_command_buffer_info_khr param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetCommandBufferInfoKHR_StubWithCallback(CMOCK_clGetCommandBufferInfoKHR_CALLBACK Callback);
#define clRemapCommandBufferKHR_ExpectAndReturn(command_buffer, automatic, num_queues, queues, num_handles, handles, handles_ret, errcode_ret, cmock_retval) clRemapCommandBufferKHR_CMockExpectAndReturn(__LINE__, command_buffer, automatic, num_queues, queues, num_handles, handles, handles_ret, errcode_ret, cmock_retval)
void clRemapCommandBufferKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_buffer_khr command_buffer, cl_bool automatic, cl_uint num_queues, const cl_command_queue* queues, cl_uint num_handles, const cl_mutable_command_khr* handles, cl_mutable_command_khr* handles_ret, cl_int* errcode_ret, cl_command_buffer_khr cmock_to_return);
typedef cl_command_buffer_khr (* CMOCK_clRemapCommandBufferKHR_CALLBACK)(cl_command_buffer_khr command_buffer, cl_bool automatic, cl_uint num_queues, const cl_command_queue* queues, cl_uint num_handles, const cl_mutable_command_khr* handles, cl_mutable_command_khr* handles_ret, cl_int* errcode_ret, int cmock_num_calls);
void clRemapCommandBufferKHR_StubWithCallback(CMOCK_clRemapCommandBufferKHR_CALLBACK Callback);
#define clUpdateMutableCommandsKHR_ExpectAndReturn(command_buffer, mutable_config, cmock_retval) clUpdateMutableCommandsKHR_CMockExpectAndReturn(__LINE__, command_buffer, mutable_config, cmock_retval)
void clUpdateMutableCommandsKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_buffer_khr command_buffer, const cl_mutable_base_config_khr* mutable_config, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clUpdateMutableCommandsKHR_CALLBACK)(cl_command_buffer_khr command_buffer, const cl_mutable_base_config_khr* mutable_config, int cmock_num_calls);
void clUpdateMutableCommandsKHR_StubWithCallback(CMOCK_clUpdateMutableCommandsKHR_CALLBACK Callback);
#define clGetMutableCommandInfoKHR_ExpectAndReturn(command, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetMutableCommandInfoKHR_CMockExpectAndReturn(__LINE__, command, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetMutableCommandInfoKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_mutable_command_khr command, cl_mutable_command_info_khr param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetMutableCommandInfoKHR_CALLBACK)(cl_mutable_command_khr command, cl_mutable_command_info_khr param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetMutableCommandInfoKHR_StubWithCallback(CMOCK_clGetMutableCommandInfoKHR_CALLBACK Callback);
#define clSetMemObjectDestructorAPPLE_ExpectAndReturn(memobj, pfn_notify, user_data, cmock_retval) clSetMemObjectDestructorAPPLE_CMockExpectAndReturn(__LINE__, memobj, pfn_notify, user_data, cmock_retval)
void clSetMemObjectDestructorAPPLE_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_mem memobj, cmock_cl_ext_func_ptr1 pfn_notify, void* user_data, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clSetMemObjectDestructorAPPLE_CALLBACK)(cl_mem memobj, cmock_cl_ext_func_ptr1 pfn_notify, void* user_data, int cmock_num_calls);
void clSetMemObjectDestructorAPPLE_StubWithCallback(CMOCK_clSetMemObjectDestructorAPPLE_CALLBACK Callback);
#define clLogMessagesToSystemLogAPPLE_Expect(errstr, private_info, cb, user_data) clLogMessagesToSystemLogAPPLE_CMockExpect(__LINE__, errstr, private_info, cb, user_data)
void clLogMessagesToSystemLogAPPLE_CMockExpect(UNITY_LINE_TYPE cmock_line, const char* errstr, const void* private_info, size_t cb, void* user_data);
typedef void (* CMOCK_clLogMessagesToSystemLogAPPLE_CALLBACK)(const char* errstr, const void* private_info, size_t cb, void* user_data, int cmock_num_calls);
void clLogMessagesToSystemLogAPPLE_StubWithCallback(CMOCK_clLogMessagesToSystemLogAPPLE_CALLBACK Callback);
#define clLogMessagesToStdoutAPPLE_Expect(errstr, private_info, cb, user_data) clLogMessagesToStdoutAPPLE_CMockExpect(__LINE__, errstr, private_info, cb, user_data)
void clLogMessagesToStdoutAPPLE_CMockExpect(UNITY_LINE_TYPE cmock_line, const char* errstr, const void* private_info, size_t cb, void* user_data);
typedef void (* CMOCK_clLogMessagesToStdoutAPPLE_CALLBACK)(const char* errstr, const void* private_info, size_t cb, void* user_data, int cmock_num_calls);
void clLogMessagesToStdoutAPPLE_StubWithCallback(CMOCK_clLogMessagesToStdoutAPPLE_CALLBACK Callback);
#define clLogMessagesToStderrAPPLE_Expect(errstr, private_info, cb, user_data) clLogMessagesToStderrAPPLE_CMockExpect(__LINE__, errstr, private_info, cb, user_data)
void clLogMessagesToStderrAPPLE_CMockExpect(UNITY_LINE_TYPE cmock_line, const char* errstr, const void* private_info, size_t cb, void* user_data);
typedef void (* CMOCK_clLogMessagesToStderrAPPLE_CALLBACK)(const char* errstr, const void* private_info, size_t cb, void* user_data, int cmock_num_calls);
void clLogMessagesToStderrAPPLE_StubWithCallback(CMOCK_clLogMessagesToStderrAPPLE_CALLBACK Callback);
#define clIcdGetPlatformIDsKHR_ExpectAndReturn(num_entries, platforms, num_platforms, cmock_retval) clIcdGetPlatformIDsKHR_CMockExpectAndReturn(__LINE__, num_entries, platforms, num_platforms, cmock_retval)
void clIcdGetPlatformIDsKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_uint num_entries, cl_platform_id* platforms, cl_uint* num_platforms, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clIcdGetPlatformIDsKHR_CALLBACK)(cl_uint num_entries, cl_platform_id* platforms, cl_uint* num_platforms, int cmock_num_calls);
void clIcdGetPlatformIDsKHR_StubWithCallback(CMOCK_clIcdGetPlatformIDsKHR_CALLBACK Callback);
#define clCreateProgramWithILKHR_ExpectAndReturn(context, il, length, errcode_ret, cmock_retval) clCreateProgramWithILKHR_CMockExpectAndReturn(__LINE__, context, il, length, errcode_ret, cmock_retval)
void clCreateProgramWithILKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, const void* il, size_t length, cl_int* errcode_ret, cl_program cmock_to_return);
typedef cl_program (* CMOCK_clCreateProgramWithILKHR_CALLBACK)(cl_context context, const void* il, size_t length, cl_int* errcode_ret, int cmock_num_calls);
void clCreateProgramWithILKHR_StubWithCallback(CMOCK_clCreateProgramWithILKHR_CALLBACK Callback);
#define clTerminateContextKHR_ExpectAndReturn(context, cmock_retval) clTerminateContextKHR_CMockExpectAndReturn(__LINE__, context, cmock_retval)
void clTerminateContextKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clTerminateContextKHR_CALLBACK)(cl_context context, int cmock_num_calls);
void clTerminateContextKHR_StubWithCallback(CMOCK_clTerminateContextKHR_CALLBACK Callback);
#define clCreateCommandQueueWithPropertiesKHR_ExpectAndReturn(context, device, properties, errcode_ret, cmock_retval) clCreateCommandQueueWithPropertiesKHR_CMockExpectAndReturn(__LINE__, context, device, properties, errcode_ret, cmock_retval)
void clCreateCommandQueueWithPropertiesKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_device_id device, const cl_queue_properties_khr* properties, cl_int* errcode_ret, cl_command_queue cmock_to_return);
typedef cl_command_queue (* CMOCK_clCreateCommandQueueWithPropertiesKHR_CALLBACK)(cl_context context, cl_device_id device, const cl_queue_properties_khr* properties, cl_int* errcode_ret, int cmock_num_calls);
void clCreateCommandQueueWithPropertiesKHR_StubWithCallback(CMOCK_clCreateCommandQueueWithPropertiesKHR_CALLBACK Callback);
#define clReleaseDeviceEXT_ExpectAndReturn(device, cmock_retval) clReleaseDeviceEXT_CMockExpectAndReturn(__LINE__, device, cmock_retval)
void clReleaseDeviceEXT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_device_id device, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clReleaseDeviceEXT_CALLBACK)(cl_device_id device, int cmock_num_calls);
void clReleaseDeviceEXT_StubWithCallback(CMOCK_clReleaseDeviceEXT_CALLBACK Callback);
#define clRetainDeviceEXT_ExpectAndReturn(device, cmock_retval) clRetainDeviceEXT_CMockExpectAndReturn(__LINE__, device, cmock_retval)
void clRetainDeviceEXT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_device_id device, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clRetainDeviceEXT_CALLBACK)(cl_device_id device, int cmock_num_calls);
void clRetainDeviceEXT_StubWithCallback(CMOCK_clRetainDeviceEXT_CALLBACK Callback);
#define clCreateSubDevicesEXT_ExpectAndReturn(in_device, properties, num_entries, out_devices, num_devices, cmock_retval) clCreateSubDevicesEXT_CMockExpectAndReturn(__LINE__, in_device, properties, num_entries, out_devices, num_devices, cmock_retval)
void clCreateSubDevicesEXT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_device_id in_device, const cl_device_partition_property_ext* properties, cl_uint num_entries, cl_device_id* out_devices, cl_uint* num_devices, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clCreateSubDevicesEXT_CALLBACK)(cl_device_id in_device, const cl_device_partition_property_ext* properties, cl_uint num_entries, cl_device_id* out_devices, cl_uint* num_devices, int cmock_num_calls);
void clCreateSubDevicesEXT_StubWithCallback(CMOCK_clCreateSubDevicesEXT_CALLBACK Callback);
#define clEnqueueMigrateMemObjectEXT_ExpectAndReturn(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueMigrateMemObjectEXT_CMockExpectAndReturn(__LINE__, command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueMigrateMemObjectEXT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_uint num_mem_objects, const cl_mem* mem_objects, cl_mem_migration_flags_ext flags, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueMigrateMemObjectEXT_CALLBACK)(cl_command_queue command_queue, cl_uint num_mem_objects, const cl_mem* mem_objects, cl_mem_migration_flags_ext flags, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueMigrateMemObjectEXT_StubWithCallback(CMOCK_clEnqueueMigrateMemObjectEXT_CALLBACK Callback);
#define clGetDeviceImageInfoQCOM_ExpectAndReturn(device, image_width, image_height, image_format, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetDeviceImageInfoQCOM_CMockExpectAndReturn(__LINE__, device, image_width, image_height, image_format, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetDeviceImageInfoQCOM_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_device_id device, size_t image_width, size_t image_height, const cl_image_format* image_format, cl_image_pitch_info_qcom param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetDeviceImageInfoQCOM_CALLBACK)(cl_device_id device, size_t image_width, size_t image_height, const cl_image_format* image_format, cl_image_pitch_info_qcom param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetDeviceImageInfoQCOM_StubWithCallback(CMOCK_clGetDeviceImageInfoQCOM_CALLBACK Callback);
#define clEnqueueAcquireGrallocObjectsIMG_ExpectAndReturn(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueAcquireGrallocObjectsIMG_CMockExpectAndReturn(__LINE__, command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueAcquireGrallocObjectsIMG_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_uint num_objects, const cl_mem* mem_objects, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueAcquireGrallocObjectsIMG_CALLBACK)(cl_command_queue command_queue, cl_uint num_objects, const cl_mem* mem_objects, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueAcquireGrallocObjectsIMG_StubWithCallback(CMOCK_clEnqueueAcquireGrallocObjectsIMG_CALLBACK Callback);
#define clEnqueueReleaseGrallocObjectsIMG_ExpectAndReturn(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueReleaseGrallocObjectsIMG_CMockExpectAndReturn(__LINE__, command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueReleaseGrallocObjectsIMG_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_uint num_objects, const cl_mem* mem_objects, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueReleaseGrallocObjectsIMG_CALLBACK)(cl_command_queue command_queue, cl_uint num_objects, const cl_mem* mem_objects, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueReleaseGrallocObjectsIMG_StubWithCallback(CMOCK_clEnqueueReleaseGrallocObjectsIMG_CALLBACK Callback);
#define clEnqueueGenerateMipmapIMG_ExpectAndReturn(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueGenerateMipmapIMG_CMockExpectAndReturn(__LINE__, command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueGenerateMipmapIMG_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_mem src_image, cl_mem dst_image, cl_mipmap_filter_mode_img mipmap_filter_mode, const size_t* array_region, const size_t* mip_region, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueGenerateMipmapIMG_CALLBACK)(cl_command_queue command_queue, cl_mem src_image, cl_mem dst_image, cl_mipmap_filter_mode_img mipmap_filter_mode, const size_t* array_region, const size_t* mip_region, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueGenerateMipmapIMG_StubWithCallback(CMOCK_clEnqueueGenerateMipmapIMG_CALLBACK Callback);
#define clGetKernelSubGroupInfoKHR_ExpectAndReturn(in_kernel, in_device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetKernelSubGroupInfoKHR_CMockExpectAndReturn(__LINE__, in_kernel, in_device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetKernelSubGroupInfoKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_kernel in_kernel, cl_device_id in_device, cl_kernel_sub_group_info param_name, size_t input_value_size, const void* input_value, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetKernelSubGroupInfoKHR_CALLBACK)(cl_kernel in_kernel, cl_device_id in_device, cl_kernel_sub_group_info param_name, size_t input_value_size, const void* input_value, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetKernelSubGroupInfoKHR_StubWithCallback(CMOCK_clGetKernelSubGroupInfoKHR_CALLBACK Callback);
#define clGetKernelSuggestedLocalWorkSizeKHR_ExpectAndReturn(command_queue, kernel, work_dim, global_work_offset, global_work_size, suggested_local_work_size, cmock_retval) clGetKernelSuggestedLocalWorkSizeKHR_CMockExpectAndReturn(__LINE__, command_queue, kernel, work_dim, global_work_offset, global_work_size, suggested_local_work_size, cmock_retval)
void clGetKernelSuggestedLocalWorkSizeKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_kernel kernel, cl_uint work_dim, const size_t* global_work_offset, const size_t* global_work_size, size_t* suggested_local_work_size, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetKernelSuggestedLocalWorkSizeKHR_CALLBACK)(cl_command_queue command_queue, cl_kernel kernel, cl_uint work_dim, const size_t* global_work_offset, const size_t* global_work_size, size_t* suggested_local_work_size, int cmock_num_calls);
void clGetKernelSuggestedLocalWorkSizeKHR_StubWithCallback(CMOCK_clGetKernelSuggestedLocalWorkSizeKHR_CALLBACK Callback);
#define clEnqueueAcquireExternalMemObjectsKHR_ExpectAndReturn(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueAcquireExternalMemObjectsKHR_CMockExpectAndReturn(__LINE__, command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueAcquireExternalMemObjectsKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_uint num_mem_objects, const cl_mem* mem_objects, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueAcquireExternalMemObjectsKHR_CALLBACK)(cl_command_queue command_queue, cl_uint num_mem_objects, const cl_mem* mem_objects, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueAcquireExternalMemObjectsKHR_StubWithCallback(CMOCK_clEnqueueAcquireExternalMemObjectsKHR_CALLBACK Callback);
#define clEnqueueReleaseExternalMemObjectsKHR_ExpectAndReturn(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueReleaseExternalMemObjectsKHR_CMockExpectAndReturn(__LINE__, command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueReleaseExternalMemObjectsKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_uint num_mem_objects, const cl_mem* mem_objects, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueReleaseExternalMemObjectsKHR_CALLBACK)(cl_command_queue command_queue, cl_uint num_mem_objects, const cl_mem* mem_objects, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueReleaseExternalMemObjectsKHR_StubWithCallback(CMOCK_clEnqueueReleaseExternalMemObjectsKHR_CALLBACK Callback);
#define clGetSemaphoreHandleForTypeKHR_ExpectAndReturn(sema_object, device, handle_type, handle_size, handle_ptr, handle_size_ret, cmock_retval) clGetSemaphoreHandleForTypeKHR_CMockExpectAndReturn(__LINE__, sema_object, device, handle_type, handle_size, handle_ptr, handle_size_ret, cmock_retval)
void clGetSemaphoreHandleForTypeKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_semaphore_khr sema_object, cl_device_id device, cl_external_semaphore_handle_type_khr handle_type, size_t handle_size, void* handle_ptr, size_t* handle_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetSemaphoreHandleForTypeKHR_CALLBACK)(cl_semaphore_khr sema_object, cl_device_id device, cl_external_semaphore_handle_type_khr handle_type, size_t handle_size, void* handle_ptr, size_t* handle_size_ret, int cmock_num_calls);
void clGetSemaphoreHandleForTypeKHR_StubWithCallback(CMOCK_clGetSemaphoreHandleForTypeKHR_CALLBACK Callback);
#define clCreateSemaphoreWithPropertiesKHR_ExpectAndReturn(context, sema_props, errcode_ret, cmock_retval) clCreateSemaphoreWithPropertiesKHR_CMockExpectAndReturn(__LINE__, context, sema_props, errcode_ret, cmock_retval)
void clCreateSemaphoreWithPropertiesKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, const cl_semaphore_properties_khr* sema_props, cl_int* errcode_ret, cl_semaphore_khr cmock_to_return);
typedef cl_semaphore_khr (* CMOCK_clCreateSemaphoreWithPropertiesKHR_CALLBACK)(cl_context context, const cl_semaphore_properties_khr* sema_props, cl_int* errcode_ret, int cmock_num_calls);
void clCreateSemaphoreWithPropertiesKHR_StubWithCallback(CMOCK_clCreateSemaphoreWithPropertiesKHR_CALLBACK Callback);
#define clEnqueueWaitSemaphoresKHR_ExpectAndReturn(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueWaitSemaphoresKHR_CMockExpectAndReturn(__LINE__, command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueWaitSemaphoresKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_uint num_sema_objects, const cl_semaphore_khr* sema_objects, const cl_semaphore_payload_khr* sema_payload_list, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueWaitSemaphoresKHR_CALLBACK)(cl_command_queue command_queue, cl_uint num_sema_objects, const cl_semaphore_khr* sema_objects, const cl_semaphore_payload_khr* sema_payload_list, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueWaitSemaphoresKHR_StubWithCallback(CMOCK_clEnqueueWaitSemaphoresKHR_CALLBACK Callback);
#define clEnqueueSignalSemaphoresKHR_ExpectAndReturn(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueSignalSemaphoresKHR_CMockExpectAndReturn(__LINE__, command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueSignalSemaphoresKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_uint num_sema_objects, const cl_semaphore_khr* sema_objects, const cl_semaphore_payload_khr* sema_payload_list, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueSignalSemaphoresKHR_CALLBACK)(cl_command_queue command_queue, cl_uint num_sema_objects, const cl_semaphore_khr* sema_objects, const cl_semaphore_payload_khr* sema_payload_list, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueSignalSemaphoresKHR_StubWithCallback(CMOCK_clEnqueueSignalSemaphoresKHR_CALLBACK Callback);
#define clGetSemaphoreInfoKHR_ExpectAndReturn(sema_object, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetSemaphoreInfoKHR_CMockExpectAndReturn(__LINE__, sema_object, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetSemaphoreInfoKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_semaphore_khr sema_object, cl_semaphore_info_khr param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetSemaphoreInfoKHR_CALLBACK)(cl_semaphore_khr sema_object, cl_semaphore_info_khr param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetSemaphoreInfoKHR_StubWithCallback(CMOCK_clGetSemaphoreInfoKHR_CALLBACK Callback);
#define clReleaseSemaphoreKHR_ExpectAndReturn(sema_object, cmock_retval) clReleaseSemaphoreKHR_CMockExpectAndReturn(__LINE__, sema_object, cmock_retval)
void clReleaseSemaphoreKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_semaphore_khr sema_object, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clReleaseSemaphoreKHR_CALLBACK)(cl_semaphore_khr sema_object, int cmock_num_calls);
void clReleaseSemaphoreKHR_StubWithCallback(CMOCK_clReleaseSemaphoreKHR_CALLBACK Callback);
#define clRetainSemaphoreKHR_ExpectAndReturn(sema_object, cmock_retval) clRetainSemaphoreKHR_CMockExpectAndReturn(__LINE__, sema_object, cmock_retval)
void clRetainSemaphoreKHR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_semaphore_khr sema_object, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clRetainSemaphoreKHR_CALLBACK)(cl_semaphore_khr sema_object, int cmock_num_calls);
void clRetainSemaphoreKHR_StubWithCallback(CMOCK_clRetainSemaphoreKHR_CALLBACK Callback);
#define clImportMemoryARM_ExpectAndReturn(context, flags, properties, memory, size, errcode_ret, cmock_retval) clImportMemoryARM_CMockExpectAndReturn(__LINE__, context, flags, properties, memory, size, errcode_ret, cmock_retval)
void clImportMemoryARM_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_mem_flags flags, const cl_import_properties_arm* properties, void* memory, size_t size, cl_int* errcode_ret, cl_mem cmock_to_return);
typedef cl_mem (* CMOCK_clImportMemoryARM_CALLBACK)(cl_context context, cl_mem_flags flags, const cl_import_properties_arm* properties, void* memory, size_t size, cl_int* errcode_ret, int cmock_num_calls);
void clImportMemoryARM_StubWithCallback(CMOCK_clImportMemoryARM_CALLBACK Callback);
#define clSVMAllocARM_ExpectAndReturn(context, flags, size, alignment, cmock_retval) clSVMAllocARM_CMockExpectAndReturn(__LINE__, context, flags, size, alignment, cmock_retval)
void clSVMAllocARM_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_svm_mem_flags_arm flags, size_t size, cl_uint alignment, void* cmock_to_return);
typedef void* (* CMOCK_clSVMAllocARM_CALLBACK)(cl_context context, cl_svm_mem_flags_arm flags, size_t size, cl_uint alignment, int cmock_num_calls);
void clSVMAllocARM_StubWithCallback(CMOCK_clSVMAllocARM_CALLBACK Callback);
#define clSVMFreeARM_Expect(context, svm_pointer) clSVMFreeARM_CMockExpect(__LINE__, context, svm_pointer)
void clSVMFreeARM_CMockExpect(UNITY_LINE_TYPE cmock_line, cl_context context, void* svm_pointer);
typedef void (* CMOCK_clSVMFreeARM_CALLBACK)(cl_context context, void* svm_pointer, int cmock_num_calls);
void clSVMFreeARM_StubWithCallback(CMOCK_clSVMFreeARM_CALLBACK Callback);
#define clEnqueueSVMFreeARM_ExpectAndReturn(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueSVMFreeARM_CMockExpectAndReturn(__LINE__, command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueSVMFreeARM_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_uint num_svm_pointers, void** svm_pointers, cmock_cl_ext_func_ptr2 pfn_free_func, void* user_data, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueSVMFreeARM_CALLBACK)(cl_command_queue command_queue, cl_uint num_svm_pointers, void** svm_pointers, cmock_cl_ext_func_ptr2 pfn_free_func, void* user_data, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueSVMFreeARM_StubWithCallback(CMOCK_clEnqueueSVMFreeARM_CALLBACK Callback);
#define clEnqueueSVMMemcpyARM_ExpectAndReturn(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueSVMMemcpyARM_CMockExpectAndReturn(__LINE__, command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueSVMMemcpyARM_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_bool blocking_copy, void* dst_ptr, const void* src_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueSVMMemcpyARM_CALLBACK)(cl_command_queue command_queue, cl_bool blocking_copy, void* dst_ptr, const void* src_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueSVMMemcpyARM_StubWithCallback(CMOCK_clEnqueueSVMMemcpyARM_CALLBACK Callback);
#define clEnqueueSVMMemFillARM_ExpectAndReturn(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueSVMMemFillARM_CMockExpectAndReturn(__LINE__, command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueSVMMemFillARM_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, void* svm_ptr, const void* pattern, size_t pattern_size, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueSVMMemFillARM_CALLBACK)(cl_command_queue command_queue, void* svm_ptr, const void* pattern, size_t pattern_size, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueSVMMemFillARM_StubWithCallback(CMOCK_clEnqueueSVMMemFillARM_CALLBACK Callback);
#define clEnqueueSVMMapARM_ExpectAndReturn(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueSVMMapARM_CMockExpectAndReturn(__LINE__, command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueSVMMapARM_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_bool blocking_map, cl_map_flags flags, void* svm_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueSVMMapARM_CALLBACK)(cl_command_queue command_queue, cl_bool blocking_map, cl_map_flags flags, void* svm_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueSVMMapARM_StubWithCallback(CMOCK_clEnqueueSVMMapARM_CALLBACK Callback);
#define clEnqueueSVMUnmapARM_ExpectAndReturn(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueSVMUnmapARM_CMockExpectAndReturn(__LINE__, command_queue, svm_ptr, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueSVMUnmapARM_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, void* svm_ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueSVMUnmapARM_CALLBACK)(cl_command_queue command_queue, void* svm_ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueSVMUnmapARM_StubWithCallback(CMOCK_clEnqueueSVMUnmapARM_CALLBACK Callback);
#define clSetKernelArgSVMPointerARM_ExpectAndReturn(kernel, arg_index, arg_value, cmock_retval) clSetKernelArgSVMPointerARM_CMockExpectAndReturn(__LINE__, kernel, arg_index, arg_value, cmock_retval)
void clSetKernelArgSVMPointerARM_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_kernel kernel, cl_uint arg_index, const void* arg_value, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clSetKernelArgSVMPointerARM_CALLBACK)(cl_kernel kernel, cl_uint arg_index, const void* arg_value, int cmock_num_calls);
void clSetKernelArgSVMPointerARM_StubWithCallback(CMOCK_clSetKernelArgSVMPointerARM_CALLBACK Callback);
#define clSetKernelExecInfoARM_ExpectAndReturn(kernel, param_name, param_value_size, param_value, cmock_retval) clSetKernelExecInfoARM_CMockExpectAndReturn(__LINE__, kernel, param_name, param_value_size, param_value, cmock_retval)
void clSetKernelExecInfoARM_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_kernel kernel, cl_kernel_exec_info_arm param_name, size_t param_value_size, const void* param_value, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clSetKernelExecInfoARM_CALLBACK)(cl_kernel kernel, cl_kernel_exec_info_arm param_name, size_t param_value_size, const void* param_value, int cmock_num_calls);
void clSetKernelExecInfoARM_StubWithCallback(CMOCK_clSetKernelExecInfoARM_CALLBACK Callback);
#define clCreateAcceleratorINTEL_ExpectAndReturn(context, accelerator_type, descriptor_size, descriptor, errcode_ret, cmock_retval) clCreateAcceleratorINTEL_CMockExpectAndReturn(__LINE__, context, accelerator_type, descriptor_size, descriptor, errcode_ret, cmock_retval)
void clCreateAcceleratorINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_accelerator_type_intel accelerator_type, size_t descriptor_size, const void* descriptor, cl_int* errcode_ret, cl_accelerator_intel cmock_to_return);
typedef cl_accelerator_intel (* CMOCK_clCreateAcceleratorINTEL_CALLBACK)(cl_context context, cl_accelerator_type_intel accelerator_type, size_t descriptor_size, const void* descriptor, cl_int* errcode_ret, int cmock_num_calls);
void clCreateAcceleratorINTEL_StubWithCallback(CMOCK_clCreateAcceleratorINTEL_CALLBACK Callback);
#define clGetAcceleratorInfoINTEL_ExpectAndReturn(accelerator, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetAcceleratorInfoINTEL_CMockExpectAndReturn(__LINE__, accelerator, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetAcceleratorInfoINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_accelerator_intel accelerator, cl_accelerator_info_intel param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetAcceleratorInfoINTEL_CALLBACK)(cl_accelerator_intel accelerator, cl_accelerator_info_intel param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetAcceleratorInfoINTEL_StubWithCallback(CMOCK_clGetAcceleratorInfoINTEL_CALLBACK Callback);
#define clRetainAcceleratorINTEL_ExpectAndReturn(accelerator, cmock_retval) clRetainAcceleratorINTEL_CMockExpectAndReturn(__LINE__, accelerator, cmock_retval)
void clRetainAcceleratorINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_accelerator_intel accelerator, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clRetainAcceleratorINTEL_CALLBACK)(cl_accelerator_intel accelerator, int cmock_num_calls);
void clRetainAcceleratorINTEL_StubWithCallback(CMOCK_clRetainAcceleratorINTEL_CALLBACK Callback);
#define clReleaseAcceleratorINTEL_ExpectAndReturn(accelerator, cmock_retval) clReleaseAcceleratorINTEL_CMockExpectAndReturn(__LINE__, accelerator, cmock_retval)
void clReleaseAcceleratorINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_accelerator_intel accelerator, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clReleaseAcceleratorINTEL_CALLBACK)(cl_accelerator_intel accelerator, int cmock_num_calls);
void clReleaseAcceleratorINTEL_StubWithCallback(CMOCK_clReleaseAcceleratorINTEL_CALLBACK Callback);
#define clHostMemAllocINTEL_ExpectAndReturn(context, properties, size, alignment, errcode_ret, cmock_retval) clHostMemAllocINTEL_CMockExpectAndReturn(__LINE__, context, properties, size, alignment, errcode_ret, cmock_retval)
void clHostMemAllocINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, const cl_mem_properties_intel* properties, size_t size, cl_uint alignment, cl_int* errcode_ret, void* cmock_to_return);
typedef void* (* CMOCK_clHostMemAllocINTEL_CALLBACK)(cl_context context, const cl_mem_properties_intel* properties, size_t size, cl_uint alignment, cl_int* errcode_ret, int cmock_num_calls);
void clHostMemAllocINTEL_StubWithCallback(CMOCK_clHostMemAllocINTEL_CALLBACK Callback);
#define clDeviceMemAllocINTEL_ExpectAndReturn(context, device, properties, size, alignment, errcode_ret, cmock_retval) clDeviceMemAllocINTEL_CMockExpectAndReturn(__LINE__, context, device, properties, size, alignment, errcode_ret, cmock_retval)
void clDeviceMemAllocINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_device_id device, const cl_mem_properties_intel* properties, size_t size, cl_uint alignment, cl_int* errcode_ret, void* cmock_to_return);
typedef void* (* CMOCK_clDeviceMemAllocINTEL_CALLBACK)(cl_context context, cl_device_id device, const cl_mem_properties_intel* properties, size_t size, cl_uint alignment, cl_int* errcode_ret, int cmock_num_calls);
void clDeviceMemAllocINTEL_StubWithCallback(CMOCK_clDeviceMemAllocINTEL_CALLBACK Callback);
#define clSharedMemAllocINTEL_ExpectAndReturn(context, device, properties, size, alignment, errcode_ret, cmock_retval) clSharedMemAllocINTEL_CMockExpectAndReturn(__LINE__, context, device, properties, size, alignment, errcode_ret, cmock_retval)
void clSharedMemAllocINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, cl_device_id device, const cl_mem_properties_intel* properties, size_t size, cl_uint alignment, cl_int* errcode_ret, void* cmock_to_return);
typedef void* (* CMOCK_clSharedMemAllocINTEL_CALLBACK)(cl_context context, cl_device_id device, const cl_mem_properties_intel* properties, size_t size, cl_uint alignment, cl_int* errcode_ret, int cmock_num_calls);
void clSharedMemAllocINTEL_StubWithCallback(CMOCK_clSharedMemAllocINTEL_CALLBACK Callback);
#define clMemFreeINTEL_ExpectAndReturn(context, ptr, cmock_retval) clMemFreeINTEL_CMockExpectAndReturn(__LINE__, context, ptr, cmock_retval)
void clMemFreeINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, void* ptr, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clMemFreeINTEL_CALLBACK)(cl_context context, void* ptr, int cmock_num_calls);
void clMemFreeINTEL_StubWithCallback(CMOCK_clMemFreeINTEL_CALLBACK Callback);
#define clMemBlockingFreeINTEL_ExpectAndReturn(context, ptr, cmock_retval) clMemBlockingFreeINTEL_CMockExpectAndReturn(__LINE__, context, ptr, cmock_retval)
void clMemBlockingFreeINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, void* ptr, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clMemBlockingFreeINTEL_CALLBACK)(cl_context context, void* ptr, int cmock_num_calls);
void clMemBlockingFreeINTEL_StubWithCallback(CMOCK_clMemBlockingFreeINTEL_CALLBACK Callback);
#define clGetMemAllocInfoINTEL_ExpectAndReturn(context, ptr, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetMemAllocInfoINTEL_CMockExpectAndReturn(__LINE__, context, ptr, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetMemAllocInfoINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, const void* ptr, cl_mem_info_intel param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetMemAllocInfoINTEL_CALLBACK)(cl_context context, const void* ptr, cl_mem_info_intel param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetMemAllocInfoINTEL_StubWithCallback(CMOCK_clGetMemAllocInfoINTEL_CALLBACK Callback);
#define clSetKernelArgMemPointerINTEL_ExpectAndReturn(kernel, arg_index, arg_value, cmock_retval) clSetKernelArgMemPointerINTEL_CMockExpectAndReturn(__LINE__, kernel, arg_index, arg_value, cmock_retval)
void clSetKernelArgMemPointerINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_kernel kernel, cl_uint arg_index, const void* arg_value, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clSetKernelArgMemPointerINTEL_CALLBACK)(cl_kernel kernel, cl_uint arg_index, const void* arg_value, int cmock_num_calls);
void clSetKernelArgMemPointerINTEL_StubWithCallback(CMOCK_clSetKernelArgMemPointerINTEL_CALLBACK Callback);
#define clEnqueueMemFillINTEL_ExpectAndReturn(command_queue, dst_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueMemFillINTEL_CMockExpectAndReturn(__LINE__, command_queue, dst_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueMemFillINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, void* dst_ptr, const void* pattern, size_t pattern_size, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueMemFillINTEL_CALLBACK)(cl_command_queue command_queue, void* dst_ptr, const void* pattern, size_t pattern_size, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueMemFillINTEL_StubWithCallback(CMOCK_clEnqueueMemFillINTEL_CALLBACK Callback);
#define clEnqueueMemcpyINTEL_ExpectAndReturn(command_queue, blocking, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueMemcpyINTEL_CMockExpectAndReturn(__LINE__, command_queue, blocking, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueMemcpyINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_bool blocking, void* dst_ptr, const void* src_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueMemcpyINTEL_CALLBACK)(cl_command_queue command_queue, cl_bool blocking, void* dst_ptr, const void* src_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueMemcpyINTEL_StubWithCallback(CMOCK_clEnqueueMemcpyINTEL_CALLBACK Callback);
#define clEnqueueMemAdviseINTEL_ExpectAndReturn(command_queue, ptr, size, advice, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueMemAdviseINTEL_CMockExpectAndReturn(__LINE__, command_queue, ptr, size, advice, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueMemAdviseINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, const void* ptr, size_t size, cl_mem_advice_intel advice, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueMemAdviseINTEL_CALLBACK)(cl_command_queue command_queue, const void* ptr, size_t size, cl_mem_advice_intel advice, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueMemAdviseINTEL_StubWithCallback(CMOCK_clEnqueueMemAdviseINTEL_CALLBACK Callback);
#define clEnqueueMigrateMemINTEL_ExpectAndReturn(command_queue, ptr, size, flags, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueMigrateMemINTEL_CMockExpectAndReturn(__LINE__, command_queue, ptr, size, flags, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueMigrateMemINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, const void* ptr, size_t size, cl_mem_migration_flags flags, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueMigrateMemINTEL_CALLBACK)(cl_command_queue command_queue, const void* ptr, size_t size, cl_mem_migration_flags flags, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueMigrateMemINTEL_StubWithCallback(CMOCK_clEnqueueMigrateMemINTEL_CALLBACK Callback);
#define clEnqueueMemsetINTEL_ExpectAndReturn(command_queue, dst_ptr, value, size, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueMemsetINTEL_CMockExpectAndReturn(__LINE__, command_queue, dst_ptr, value, size, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueMemsetINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, void* dst_ptr, cl_int value, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueMemsetINTEL_CALLBACK)(cl_command_queue command_queue, void* dst_ptr, cl_int value, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueMemsetINTEL_StubWithCallback(CMOCK_clEnqueueMemsetINTEL_CALLBACK Callback);
#define clCreateBufferWithPropertiesINTEL_ExpectAndReturn(context, properties, flags, size, host_ptr, errcode_ret, cmock_retval) clCreateBufferWithPropertiesINTEL_CMockExpectAndReturn(__LINE__, context, properties, flags, size, host_ptr, errcode_ret, cmock_retval)
void clCreateBufferWithPropertiesINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, const cl_mem_properties_intel* properties, cl_mem_flags flags, size_t size, void* host_ptr, cl_int* errcode_ret, cl_mem cmock_to_return);
typedef cl_mem (* CMOCK_clCreateBufferWithPropertiesINTEL_CALLBACK)(cl_context context, const cl_mem_properties_intel* properties, cl_mem_flags flags, size_t size, void* host_ptr, cl_int* errcode_ret, int cmock_num_calls);
void clCreateBufferWithPropertiesINTEL_StubWithCallback(CMOCK_clCreateBufferWithPropertiesINTEL_CALLBACK Callback);
#define clEnqueueReadHostPipeINTEL_ExpectAndReturn(command_queue, program, pipe_symbol, blocking_read, ptr, size, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueReadHostPipeINTEL_CMockExpectAndReturn(__LINE__, command_queue, program, pipe_symbol, blocking_read, ptr, size, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueReadHostPipeINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_program program, const char* pipe_symbol, cl_bool blocking_read, void* ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueReadHostPipeINTEL_CALLBACK)(cl_command_queue command_queue, cl_program program, const char* pipe_symbol, cl_bool blocking_read, void* ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueReadHostPipeINTEL_StubWithCallback(CMOCK_clEnqueueReadHostPipeINTEL_CALLBACK Callback);
#define clEnqueueWriteHostPipeINTEL_ExpectAndReturn(command_queue, program, pipe_symbol, blocking_write, ptr, size, num_events_in_wait_list, event_wait_list, event, cmock_retval) clEnqueueWriteHostPipeINTEL_CMockExpectAndReturn(__LINE__, command_queue, program, pipe_symbol, blocking_write, ptr, size, num_events_in_wait_list, event_wait_list, event, cmock_retval)
void clEnqueueWriteHostPipeINTEL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_command_queue command_queue, cl_program program, const char* pipe_symbol, cl_bool blocking_write, const void* ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clEnqueueWriteHostPipeINTEL_CALLBACK)(cl_command_queue command_queue, cl_program program, const char* pipe_symbol, cl_bool blocking_write, const void* ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event, int cmock_num_calls);
void clEnqueueWriteHostPipeINTEL_StubWithCallback(CMOCK_clEnqueueWriteHostPipeINTEL_CALLBACK Callback);
#define clGetImageRequirementsInfoEXT_ExpectAndReturn(context, properties, flags, image_format, image_desc, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetImageRequirementsInfoEXT_CMockExpectAndReturn(__LINE__, context, properties, flags, image_format, image_desc, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetImageRequirementsInfoEXT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_context context, const cl_mem_properties* properties, cl_mem_flags flags, const cl_image_format* image_format, const cl_image_desc* image_desc, cl_image_requirements_info_ext param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetImageRequirementsInfoEXT_CALLBACK)(cl_context context, const cl_mem_properties* properties, cl_mem_flags flags, const cl_image_format* image_format, const cl_image_desc* image_desc, cl_image_requirements_info_ext param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetImageRequirementsInfoEXT_StubWithCallback(CMOCK_clGetImageRequirementsInfoEXT_CALLBACK Callback);
#define clGetICDLoaderInfoOCLICD_ExpectAndReturn(param_name, param_value_size, param_value, param_value_size_ret, cmock_retval) clGetICDLoaderInfoOCLICD_CMockExpectAndReturn(__LINE__, param_name, param_value_size, param_value, param_value_size_ret, cmock_retval)
void clGetICDLoaderInfoOCLICD_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_icdl_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clGetICDLoaderInfoOCLICD_CALLBACK)(cl_icdl_info param_name, size_t param_value_size, void* param_value, size_t* param_value_size_ret, int cmock_num_calls);
void clGetICDLoaderInfoOCLICD_StubWithCallback(CMOCK_clGetICDLoaderInfoOCLICD_CALLBACK Callback);
#define clSetContentSizeBufferPoCL_ExpectAndReturn(buffer, content_size_buffer, cmock_retval) clSetContentSizeBufferPoCL_CMockExpectAndReturn(__LINE__, buffer, content_size_buffer, cmock_retval)
void clSetContentSizeBufferPoCL_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cl_mem buffer, cl_mem content_size_buffer, cl_int cmock_to_return);
typedef cl_int (* CMOCK_clSetContentSizeBufferPoCL_CALLBACK)(cl_mem buffer, cl_mem content_size_buffer, int cmock_num_calls);
void clSetContentSizeBufferPoCL_StubWithCallback(CMOCK_clSetContentSizeBufferPoCL_CALLBACK Callback);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
